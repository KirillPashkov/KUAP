#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 0d16c37f-71db-44d4-bf23-7ac027d8fd54
# Source File: ..\KuapYoyo.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
5wIAAB+LCAAAAAAABACVklFPgzAUhd+X7D8Q3hHYUHwoTZQ5Y8x02RYTn0yhF1NTWlIKun8vjGIY
S8z21tN7+p2b3os2kMoa1H5BNMHTiWWhtZJfkOqDaOQbqJJJgX3k9kdTWTIOTwvsUf8mnYeZE/o0
cYKABk6SzeZOSFJvFtLbjF4HyDVm89Rk7PYFYA+5QzmAl0YYaW0gAwUihReSQ2Tb1n3FOI1sz8Zb
TZSuiquiLLus/5/GhHNnRZhYSpV/FGU2ZPX3DSw7G/bIZUJ4g/IHKCuWeU4EffjRINqvi+ydqsDG
nbtsEvyzE9oJrRXUDL7HHQ9KFzW9BVWzFGIptJJ8TD2uXgS+q7RcSQpjZH9/AutEN/C/fejUq2Kf
TBDeGtoI/FyR4l3uZQMpGiNyTxzTCXKPFvsXErVRIOcCAAA=#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2014 v4.1.58
     Generated on:       12.09.2018 16:16
     Generated by:       Pashkov-KM
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2014
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
xQQAAB+LCAAAAAAABAC9lMlqwzAQQO+F/oPJ2Xip4jgBxxBSciltQ13aXsf22IhqCSM5wX9fZyEJ
LXQJ1Ogyo5Hm8ZCY5AkLvUZqb8GC0wWGazUd3AzS6yvHSR6J11yBWHCBDyAxzSyQbVbeypjE/1Ld
3ZkZgzIXHM0uP+20adYai9K7BwU1SlTWmzVWS7Ad1HVeDnTmBdvlOvNG2IZwqrCxBMJ1lk3Xt7jD
9lm/Y3cwzCs2jkZQstEQWZT4R9JnsjSFJsHzE2X4W0oexxAV0SicsCEG48k3lL1fHwzvlatSb4y3
0CRNL8TtD+kHRLDhqr6EFbAqquIqDMsoAAY/s96k6MeJExZWU5shrXmBFz3Zn+3mmrAXvYPVknSn
9g9ux3Q/VRL/fGylH3nEhp/FBAAA#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

function Main
{
	Param ([String]$Commandline)
	$script:Dictionary = New-Object System.Collections.Specialized.StringDictionary
	Convert-CommandLineToDictionary -Dictionary $script:Dictionary -CommandLine $Commandline -ParamIndicator '-'
	if ((Call-MainForm_psf) -eq "OK")
	{
		
	}
	$global:ExitCode = 0
}#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
AHYcn/+niif/AjCRWEtjcQAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$groupboxInsertProgress = New-Object 'System.Windows.Forms.GroupBox'
	$datagridviewInsertResults = New-Object 'System.Windows.Forms.DataGridView'
	$groupboxParse = New-Object 'System.Windows.Forms.GroupBox'
	$radiobuttonInsertToDB = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonPreview = New-Object 'System.Windows.Forms.RadioButton'
	$buttonStartJob = New-Object 'System.Windows.Forms.Button'
	$groupboxScanResults = New-Object 'System.Windows.Forms.GroupBox'
	$datagridviewScanResults = New-Object 'System.Windows.Forms.DataGridView'
	$groupboxScan = New-Object 'System.Windows.Forms.GroupBox'
	$buttonScanFolder = New-Object 'System.Windows.Forms.Button'
	$buttonBrowseFolder = New-Object 'System.Windows.Forms.Button'
	$textboxFolder = New-Object 'System.Windows.Forms.TextBox'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$imagelistButtonBusyAnimation = New-Object 'System.Windows.Forms.ImageList'
	$timerJobTracker = New-Object 'System.Windows.Forms.Timer'
	$notifyicon = New-Object 'System.Windows.Forms.NotifyIcon'
	$contextmenustrip = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$развернутьОкноПрограммыToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$закрытьПрограммуToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$TimerAutoModeMinimize = New-Object 'System.Windows.Forms.Timer'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$OnLoadFormEvent = {
		Set-CommandLineParameters
		Get-Prerequisites
		New-LogRecord -EventType 'DEBUG' -Event $('{0} FileInfo: Length {1}; LastWriteTime {2}.' -f $script:XMLConfig, ([System.IO.FileInfo]$script:XMLConfig).Length, ([System.IO.FileInfo]$script:XMLConfig).LastWriteTime)
		New-LogRecord -EventType 'DEBUG' -Event $('MD5 hash "{0}" for configuration file "{1}" created.' -f $script:ConfigurationFileMD5Hash, $script:XMLConfig)
		New-LogRecord -EventType 'DEBUG' -Event $('{0} FileInfo: Length {1}; LastWriteTime {2}.' -f $script:Functions,([System.IO.FileInfo]$script:Functions).Length, ([System.IO.FileInfo]$script:Functions).LastWriteTime)
		(Get-Content $script:Functions | Select-String -Pattern 'function') | % { $_.Line.Substring(9) } | % { New-LogRecord -EventType 'DEBUG' -Event $('Function loaded "{0}"' -f $_) }
		New-LogRecord -EventType 'DEBUG' -Event $('MD5 hash "{0}" for functions file "{1}" created.' -f $script:FunctionsFileMD5Hash, $script:Functions)
		New-LogRecord -EventType 'DEBUG' -Event 'OnLoadFormEvent.'
		if (-not $script:Prerequisites)
		{
			New-LogRecord -EventType 'ERROR' -Event $script:SB.ToString()
			Invoke-MessageBox -Caption 'Ошибка' -Text $script:SB.ToString()
			$MainForm.Close()
			$MainForm.Dispose()
		}
		else
		{
			$textboxFolder.Text = $script:WorkingDirectory
			try
			{
				$script:MongoSrvObj = Get-MongoServer -HostName $script:MongoHost -Port $script:MongoPort
				$script:MongoDBObj = Get-MongoDatabase -MongoServer $script:MongoSrvObj -DatabaseName $script:MongoDatabase
			}
			catch
			{
				$radiobuttonInsertToDB.Enabled = $false
				New-LogRecord -EventType 'ERROR' -Event $('Невозможно подключится к БД "{0}" на сервере "{1}:{2}".' -f $script:MongoDatabase, $script:MongoHost, $script:MongoPort)
				New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
				Invoke-MessageBox -Caption 'Ошибка' -Text $('Невозможно подключится к БД "{0}" на сервере "{1}:{2}".' -f $script:MongoDatabase, $script:MongoHost, $script:MongoPort)
			}
		}
		
		if ($script:ApplicationMode -eq 'Auto')
		{
			New-LogRecord -EventType 'DEBUG' -Event $('ApplicationMode is set to {0}.' -f $script:ApplicationMode)
			New-LogRecord -EventType 'DEBUG' -Event 'Call-AutoMode_psf.'
		
			Call-AutoMode_psf
		
			$TimerAutoModeMinimize.Start()
	
			if ($script:NewFilesToProceed)
			{
				$textboxFolder.Text = $script:AutoModeCurrent
				& $buttonScanFolder_Click
				$radiobuttonInsertToDB.Checked = $true
				& $buttonStartJob_Click
			}
		}
		
		if ($script:ApplicationMode -eq 'ExitAuto')
		{
			New-LogRecord -EventType 'DEBUG' -Event $('ApplicationMode is set to {0}.' -f $script:ApplicationMode)
			$MainForm.Close()
		}
	}
	
	$buttonBrowseFolder_Click = {
		New-LogRecord -EventType 'DEBUG' -Event 'buttonBrowseFolder_Click.'
		if ($folderbrowserdialog1.ShowDialog() -eq 'OK')
		{
			$textboxFolder.Text = $folderbrowserdialog1.SelectedPath
		}
	}
	
	$buttonScanFolder_Click = {
		New-LogRecord -EventType 'DEBUG' -Event 'buttonScanFolder_Click.'
		$datagridviewScanResults.DataSource = $null
		if ([System.IO.Directory]::Exists($textboxFolder.Text))
		{
			$script:FilesObj = New-Object System.Collections.ArrayList
			$script:FilesObjNotFound = New-Object System.Collections.ArrayList
			foreach ($Type in [Array]$script:FilePatternHolder.Keys)
			{
				$tType = $script:FilePatternHolder[$Type]
				$CurrentFile = Get-ChildItem $textboxFolder.Text |
				Where-Object { $_.Name -like $tType -and $_.Extension -eq '.xlsx' } |
				Sort-Object CreationTime, LastAccessTime, LastWriteTime -Descending |
				Select @{ l = 'Type'; e = { $Type } }, @{ l = 'Pattern'; e = { $tType } }, FullName, @{ l = 'Size'; e = { '{0:N2} KB' -f ($_.Length / 1KB) } }, CreationTime, LastAccessTime, LastWriteTime -First 1
				if ($CurrentFile) { [Void]$script:FilesObj.Add($CurrentFile) }
				else
				{
					$FileNotFoundObj = New-Object PSObject -Property @{ 'Type'= $Type; 'Pattern' = $script:FilePatternHolder[$Type] }
					[Void]$script:FilesObjNotFound.Add($FileNotFoundObj)
				}
				$CurrentFile = $null
			}
			if ($script:FilesObj.Count -gt 0)
			{
				New-LogRecord -EventType 'DEBUG' -Event $("script:FilesObj.Count {0}." -f $script:FilesObj.Count)
				$groupboxParse.Enabled = $true
				$datagridviewScanResults.DataSource = ConvertTo-DataTable -InputObject $script:FilesObj
				if ($script:FilesObjNotFound.Count -gt 0)
				{
					[String]$FilesNotFoundText = 'Не найден файл:'
					$FilesNotFoundText += [System.Environment]::NewLine
					
					foreach ($FileNotFound in $script:FilesObjNotFound)
					{
						$FilesNotFoundText += [System.Environment]::NewLine
						$FilesNotFoundText += $('Тип: "{0}" шаблон: "{1}".' -f $FileNotFoundObj.Type, $FileNotFoundObj.Pattern)
					}
					New-LogRecord -EventType 'DEBUG' -Event $("script:FilesObj.Count {0}." -f $script:FilesObjNotFound.Count)
					Invoke-MessageBox -Caption 'Ошибка' -Text $FilesNotFoundText
				}
			}
			else
			{
				$groupboxParse.Enabled = $false
				New-LogRecord -EventType 'ERROR' -Event $("Подходящих файлов не найдено.{0}{0}Проверьте наличие файлов в указаной директории.{0}Проверьте корректность шаблонов." -f [System.Environment]::NewLine)
				Invoke-MessageBox -Caption 'Ошибка' -Text $("Подходящих файлов не найдено.{0}{0}Проверьте наличие файлов в указаной директории.{0}Проверьте корректность шаблонов." -f [System.Environment]::NewLine)
			}
		}
		else
		{
			$groupboxParse.Enabled = $false
			New-LogRecord -EventType 'ERROR' -Event $('Директория {0} не существует.' -f $textboxFolder.Text)
			Invoke-MessageBox -Caption 'Ошибка' -Text $('Директория {0} не существует.' -f $textboxFolder.Text)
		}
	}
	
	$buttonStartJob_Click = {
		New-LogRecord -EventType 'DEBUG' -Event 'buttonStartJob_Click.'
		$buttonStartJob.Enabled = $false
	
		if ($radiobuttonPreview.Checked)
		{
			$script:ExecuteMode = 'Preview'
			$script:Properties = @('Тип клиента', 'Currency', 'Продукт', 'VolumeMin', 'VolumeMax', 'Переодичность', 'Months', 'BeginDays', 'EndDays', 'Rate')
		}
		if ($radiobuttonInsertToDB.Checked)
		{
			$script:ExecuteMode = 'Insert'
			$script:Properties = 'Id', 'Status'
			New-LogRecord -EventType 'DEBUG' -Event $('ImportMode {0}.' -f $script:ImportMode)
			New-LogRecord -EventType 'DEBUG' -Event $('BackupCollection {0}.' -f $script:BackupCollection)
			if ($script:BackupCollection)
			{
				try
				{
					Get-MongoCollection -MongoDatabase $script:MongoDBObj -MongoCollection $script:MongoCollection -Action 'Backup'
					New-LogRecord -EventType 'DEBUG' -Event $('Backup_{0} collection created.' -f $script:MongoCollection)
				}
				catch
				{
					New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
				}
			}
			if ($script:ImportMode -eq 'FULL')
			{
				try
				{
					$RecordsCount = Get-MongoCollection -MongoDatabase $script:MongoDBObj -MongoCollection $script:MongoCollection -Action Count
					New-LogRecord -EventType 'DEBUG' -Event $('RecordsCount {0}.' -f $RecordsCount)
					Get-MongoCollection -MongoDatabase $script:MongoDBObj -MongoCollection $script:MongoCollection -Action Truncate
					New-LogRecord -EventType 'DEBUG' -Event $('Truncate processed on MongoDB collection {0}.' -f $script:MongoCollection)
				}
				catch
				{
					New-LogRecord -EventType 'ERROR' -Event $('RecordsCount {0}.' -f $RecordsCount)
				}
			}
			
		}
		
		New-LogRecord -EventType 'DEBUG' -Event $('ExecuteMode {0}.' -f $script:ExecuteMode)
		
		$datagridviewInsertResults.DataSource = $null
		$groupboxScan.Enabled = $false
		$groupboxScanResults.Enabled = $false
		$radiobuttonPreview.Enabled = $false
		$radiobuttonInsertToDB.Enabled = $false
		
		$Arguments = $script:LibRoot, $script:FilesObj, $script:Currencies, $script:DepositHolder, $script:TermMonthHolder, $script:ExecuteMode, $script:WorkingDirectory, $script:MongoHost, $script:MongoPort, $script:MongoDatabase, $script:MongoCollection, $script:LogLevel, $script:ImportMode, $script:LogPattern, $script:BackupCollection, $script:FileSheetHolder, $script:Functions
		
		Add-JobTracker -Name "ParseFilesPreviewOrInsertToDB" `
					   -JobScript {
			Param ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)
			$script:LibRoot = $1
			$script:FilesObj = $2
			$script:Currencies = $3
			$script:DepositHolder = $4
			$script:TermMonthHolder = $5
			$script:ExecuteMode = $6
			$script:WorkingDirectory = $7
			$script:MongoHost = $8
			$script:MongoPort = $9
			$script:MongoDatabase = $10
			$script:MongoCollection = $11
			$script:LogLevel = $12
			$script:ImportMode = $13
			$script:LogPattern = $14
			$script:BackupCollection = $15
			$script:FileSheetHolder = $16
			$script:Functions = $17
			
			. $script:Functions
			
			function New-LogRecord
			{
				param ($EventType, $Event)
				$LogFile = Join-Path $script:WorkingDirectory $script:LogPattern
				switch ($script:LogLevel)
				{
					'DEBUG' {
						'{0}|{1}|{2}|{3}' -f $EventType, [System.Security.Principal.WindowsIdentity]::GetCurrent().Name, [System.DateTime]::Now.ToString('dd.MM.yyyy HH:mm:ss.fff', [System.Globalization.CultureInfo]::InvariantCulture), $Event | Out-File $LogFile -Append
					}
					'ERROR'
					{
						if ($EventType -eq 'ERROR')
						{
							'{0}|{1}|{2}|{3}' -f $EventType, [System.Security.Principal.WindowsIdentity]::GetCurrent().Name, [System.DateTime]::Now.ToString('dd.MM.yyyy HH:mm:ss.fff', [System.Globalization.CultureInfo]::InvariantCulture), $Event | Out-File $LogFile -Append
						}
					}
				}
			}
			
			function Get-MongoServer
			{
				param ($HostName, $Port);
				$MongoClient = New-Object -TypeName MongoDB.Driver.MongoClient -ArgumentList $("mongodb://{0}:{1}" -f $HostName, $Port);
				$MongoClient.GetServer();
			}
			
			function Get-MongoDatabase
			{
				param ($MongoServer, $DatabaseName);
				$MongoServer.Connect();
				$MongoServer.GetDatabase($DatabaseName);
			}
			
			function Get-MongoCollection
			{
				param ($MongoDatabase, $MongoCollection, $Action, [MongoDB.Bson.BsonDocument]$Doc, [String]$DocId);
				$Collection = $MongoDatabase.GetCollection($MongoCollection);
				switch ($Action)
				{
					'Count' {
						$Collection.Count()
					};
					'Truncate' {
						[MongoDB.Bson.BsonDocument]$EmptyQDoc = [MongoDB.Driver.Builders.Query]::Null
						$Collection.Remove($EmptyQDoc)
					};
					'Insert' {
						$Collection.Insert($Doc, [MongoDB.Driver.SafeMode]::True)
					};
					'CheckId'{
						$Query = [MongoDB.Driver.Builders.Query]::EQ('_id', $DocId);
						$FindResults = $Collection.Find($Query);
						$FindResults.Count()
					};
					'RemoveDoc'{
						$Query = [MongoDB.Driver.Builders.Query]::EQ('_id', $DocId);
						[MongoDB.Bson.BsonDocument]$DocToRemove = $Query
						$Collection.Remove($DocToRemove)
					};
					'Backup'{
						$BackupName = 'Backup_{0}' -f $MongoCollection
						$MongoDatabase.DropCollection($BackupName)
						$MongoDatabase.CreateCollection($BackupName)
						$BackupCollection = $MongoDatabase.GetCollection($BackupName)
						$BackupData = $Collection.FindAll()
						$BackupCollection.InsertBatch($BackupData)
					};
				}
			}
			
			function Set-RateObject
			{
				param (
					[String]$Id = [Guid]::NewGuid(),
					[Double]$Rate = $null,
					[Bool]$ClearRate,
					[Int]$Months,
					[Int]$BeginDays,
					[Int]$EndDays
				)
				$OrderedDictionary = New-Object System.Collections.Specialized.OrderedDictionary
				$OrderedDictionary.Add('_id', [MongoDB.Bson.BsonString]::Create($Id));
				if ($Rate) { $OrderedDictionary.Add('rate', [MongoDB.Bson.BsonDouble]::Create($Rate)) };
				$OrderedDictionary.Add('clearRate', [MongoDB.Bson.BsonBoolean]::Create($ClearRate));
				$OrderedDictionary.Add('months', [MongoDB.Bson.BsonInt32]::Create($Months));
				$OrderedDictionary.Add('beginDays', [MongoDB.Bson.BsonInt32]::Create($BeginDays));
				if ($EndDays) { $OrderedDictionary.Add('endDays', [MongoDB.Bson.BsonInt32]::Create($EndDays)) }
				else { $OrderedDictionary.Add('endDays', [MongoDB.Bson.BsonInt32]::Create($BeginDays)) }; # можно убрать else {} т.к. непонятно почему у Прайм разные вариации данного поля, похоже, что у них какая-то ошибка
				$OrderedDictionary.Add('lastTimeUpdate', [MongoDB.Bson.BsonInt64]::Create(([MongoDB.Bson.BsonTimestamp]0).Timestamp)); #[MongoDB.Bson.BsonDateTime]::Create([System.DateTime]::Now));
				$OrderedDictionary
			}
			
			function ParseHolders-And-InsertToDB
			{
				param ([System.Collections.Specialized.OrderedDictionary]$ObjectHolder, $Mode)
				foreach ($ClientType in $ObjectHolder.Keys)
				{
					foreach ($Product in $ObjectHolder[$ClientType].Keys)
					{
						foreach ($Currency in $ObjectHolder[$ClientType][$Product].Keys)
						{
							$RObject = New-Object System.Collections.ArrayList
							foreach ($Term in $ObjectHolder[$ClientType][$Product][$Currency].Keys)
							{
								foreach ($SumRange in $ObjectHolder[$ClientType][$Product][$Currency][$Term].Keys)
								{
									foreach ($PercentPeriod in $ObjectHolder[$ClientType][$Product][$Currency][$Term][$SumRange].Keys)
									{
										$Object = New-Object PSObject -Property @{
											'Product' = $Product;
											'ClientType' = switch ($ClientType) { 'ЮЛ'{ 1; break }'ФЛ'{ 2; break } }
											'VolumeMin' = Set-SumRangeFromValues -Range $SumRange -Type 'Min' -Multiple 1000;
											'VolumeMax' = Set-SumRangeFromValues -Range $SumRange -Type 'Max' -Multiple 1000;
											'Rate' = [Regex]::Replace($ObjectHolder[$ClientType][$Product][$Currency][$Term][$SumRange][$PercentPeriod], [String][Char]44, [String][Char]46);
											'ClearRate' = [Bool]$false;
											'PercentPeriod' = $PercentPeriod;
											'Months' = [RegEx]::Replace($script:TermMonthHolder[$Term], [Char]77, '');
											'BeginDays' = Set-TermRange -Term $Term -Type 'Begin';
											'EndDays' = Set-TermRange -Term $Term -Type 'End';
											'Currency' = $Currency;
										}
										[Void]$RObject.Add($Object)
										if ($Mode -eq 'Preview') { [Void]$script:PreviewRObject.Add($Object) }
									}
								}
							}
							if ($Mode -eq 'Insert')
							{
								[Array]$VolumeRange = $RObject | Select VolumeMin, VolumeMax -Unique
								
								$ClientTypeFixed = switch ($ClientType) { 'ЮЛ'{ 1; break }'ФЛ'{ 2; break } }
								foreach ($Volume in $VolumeRange)
								{
									foreach ($PP in @($ObjectHolder[$ClientType][$Product][$Currency][$Term][$SumRange].Keys))
									{
										try
										{
											$Status = 'OK'
											$CurrentElement = $RObject | ? { $_.Product -eq $Product -and $_.Currency -eq $Currency -and $_.ClientType -eq $ClientTypeFixed -and $_.VolumeMin -eq $Volume.VolumeMin -and $_.VolumeMax -eq $Volume.VolumeMax -and $_.PercentPeriod -eq $PP }
											
											[Array]$CheckForNullMonths = $CurrentElement | ? { [String]::IsNullOrEmpty($_.Months) }
											if ($CheckForNullMonths.Count -gt 0)
											{
												$Status = 'WARNING'
												foreach ($NotDefinedMonth in $CheckForNullMonths)
												{
													New-LogRecord -EventType 'ERROR' -Event $('Для срока действия ClientType {0} Product {1} ({2}) с BeginDays {3} и EndDays {4} в конфигурационном файле не указано количество месяцев. Запись загружена, но ошибочные значения сроков действия будут пропущены.' -f $ClientType, $Product, $script:DepositHolder[$Product], $NotDefinedMonth.BeginDays, $NotDefinedMonth.EndDays)
												}
											}
											
											[Array]$CheckForDoubleMonths = $CurrentElement | ? { $_.Months } | Group-Object -Property Months | ? { $_.Count -gt 1 }
											if ($CheckForDoubleMonths.Count -gt 0)
											{
												$Status = 'WARNING'
												$DoubleMonths = @()
												foreach ($DoubleMonthRecord in $CheckForDoubleMonths)
												{
													$DoubleMonths += $DoubleMonthRecord.Name
													foreach ($GroupItem in $CheckForDoubleMonths.Group)
													{
														New-LogRecord -EventType 'ERROR' -Event $('Для срока действия ClientType {0} Product {1}({2}) с BeginDays {3} и EndDays {4} найдено общее с другим сроком действия количество месяцев {5}. Запись загружена, но ошибочные значения сроков действия будут пропущены.' -f $ClientType, $Product,$script:DepositHolder[$Product],$GroupItem.BeginDays,$GroupItem.EndDays,$GroupItem.Months)
													}
												}
											}
											
											$RateObjectPropertiesSet = $CurrentElement | ? { $_.Months -and $DoubleMonths -notcontains $_.Months } | Select Rate, ClearRate, Months, BeginDays, EndDays
											$MonthsSet = @($RateObjectPropertiesSet | Select -Expand Months)
											
											$DocId = "{0}/{1}_{2}_{3}_{4}_{5}" -f $Currency, $Product, $ClientTypeFixed, $PP, $Volume.VolumeMin, $Volume.VolumeMax
											$DocInstrument = "{0}/{1}" -f $Currency, $Product
											
											[Int]$DocPeriodMin = $MonthsSet[0]
											[Int]$DocPeriodMax = $MonthsSet[-1]
											
											[MongoDB.Bson.BsonDocument]$Doc = New-Object -TypeName MongoDB.Bson.BsonDocument;
											$Doc['_id'] = [MongoDB.Bson.BsonString]::Create($DocId);
											$Doc['instrument'] = [MongoDB.Bson.BsonString]::Create($DocInstrument);
											$Doc['personType'] = [MongoDB.Bson.BsonInt32]::Create($ClientTypeFixed);
											$Doc['percentPeriod'] = [MongoDB.Bson.BsonString]::Create($PP);
											$Doc['depositName'] = [MongoDB.Bson.BsonString]::Create($script:DepositHolder[$Product]);
											$Doc['volumeMin'] = [MongoDB.Bson.BsonDouble]::Create($Volume.VolumeMin);
											if ($Volume.VolumeMax) { $Doc['volumeMax'] = [MongoDB.Bson.BsonDouble]::Create($Volume.VolumeMax) };
											$Doc['periodMin'] = [MongoDB.Bson.BsonInt32]::Create($DocPeriodMin);
											$Doc['periodMax'] = [MongoDB.Bson.BsonInt32]::Create($DocPeriodMax);
											$Doc['rates'] = New-Object -TypeName MongoDB.Bson.BsonDocument;
											
											foreach ($RateObjectProperties in @($RateObjectPropertiesSet | Select -Expand Months))
											{
												$Doc['rates']["$RateObjectProperties"] = New-Object -TypeName MongoDB.Bson.BsonDocument;
												$ObjectSet = $RateObjectPropertiesSet | ? { $_.Months -eq $RateObjectProperties }
												$Hash = Set-RateObject -Rate $ObjectSet.Rate -ClearRate $ObjectSet.ClearRate -Months $ObjectSet.Months -BeginDays $ObjectSet.BeginDays -EndDays $ObjectSet.EndDays
												[Void]$Doc['rates']["$RateObjectProperties"].Add($Hash);
											}
											
											$Doc['lastTimeUpdate'] = [MongoDB.Bson.BsonInt64]::Create(([MongoDB.Bson.BsonTimestamp]0).Timestamp);
											$Doc['lastEditorLogin'] = [MongoDB.Bson.BsonString]::Create($env:USERNAME);
											$Doc['lastEditTime'] = [MongoDB.Bson.BsonDateTime]::Create([System.DateTime]::Now);
											
											[MongoDB.Bson.BsonDocument]$DocToInsert = $Doc
											$Doc = $null
											
											switch ($script:ImportMode)
											{
												'ADD' {
													$CheckResults = Get-MongoCollection -MongoDatabase $script:MongoDBObj -MongoCollection $script:MongoCollection -Action 'CheckId' -DocId $DocId
													if ($CheckResults -eq 0)
													{
														$Executing = Get-MongoCollection -MongoDatabase $script:MongoDBObj -MongoCollection $script:MongoCollection -Action $Mode -Doc $DocToInsert
														if ($Executing.OK)
														{
															New-LogRecord -EventType 'DEBUG' -Event $('Ставка ID {0} успешно загружена.' -f $DocId)
														}
													}
													else
													{
														New-LogRecord -EventType 'DEBUG' -Event $('Ставка ID {0} уже существует.' -f $DocId)
													}
												};
												'REWRITE' {
													$CheckResults = Get-MongoCollection -MongoDatabase $script:MongoDBObj -MongoCollection $script:MongoCollection -Action 'CheckId' -DocId $DocId
													if ($CheckResults -eq 1)
													{
														New-LogRecord -EventType 'DEBUG' -Event $('Ставка ID {0} уже существует.' -f $DocId)
														$RemoveResults = Get-MongoCollection -MongoDatabase $script:MongoDBObj -MongoCollection $script:MongoCollection -Action 'RemoveDoc' -DocId $DocId
														if ($RemoveResults.OK)
														{
															New-LogRecord -EventType 'DEBUG' -Event $('Ставка ID {0} успешно удалена.' -f $DocId)
														}
													}
													$Executing = Get-MongoCollection -MongoDatabase $script:MongoDBObj -MongoCollection $script:MongoCollection -Action $Mode -Doc $DocToInsert
													if ($Executing.OK)
													{
														New-LogRecord -EventType 'DEBUG' -Event $('Ставка ID {0} успешно загружена.' -f $DocId)
													}
												};
												default
												{
													$Executing = Get-MongoCollection -MongoDatabase $script:MongoDBObj -MongoCollection $script:MongoCollection -Action $Mode -Doc $DocToInsert
													if ($Executing.OK)
													{
														New-LogRecord -EventType 'DEBUG' -Event $('Ставка ID {0} успешно загружена.' -f $DocId)
													}
												}
											}
											$DocToInsert = $null
										}
										catch
										{
											$Status = 'ERROR'
											New-LogRecord -EventType 'ERROR' -Event $('Ошибка загрузки ставки ID {0}.' -f $DocId)
											New-LogRecord -EventType 'ERROR' -Event $(
	                                        'Продукт: {0}; валюта: {1}; тип клиента: {2}; периодичность выплаты: {3}; сумма вклада: {4}-{5}.' -f $script:DepositHolder[$Product],
																														  $($script:Currencies.Keys | %{ if ($script:Currencies[$_] -eq $Currency) { $_ } }),
																														  $ClientType,
																														  $(switch ($PercentPeriod)
																															  {
																																  'E' { 'В конце срока' }
																																  'M' { 'Ежемесячно' }
																															  }
																														  ),
																														  $Volume.VolumeMin,
																														  $(if ($Volume.VolumeMax) { $Volume.VolumeMax } else { '0.00' })
											)
											New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
										}
										$StatusObject = New-Object PSObject -Property @{ Id = $DocId; Status = $Status }
										[Void]$script:DocsStatus.Add($StatusObject)
									}
								}
							}
						}
					}
				}
			}
			try
			{
				foreach ($DLL in @('EPPlus.dll', 'MongoDB.Bson.dll', 'MongoDB.Driver.dll'))
				{
					$DLLPath = Join-Path $script:LibRoot $DLL
					if ([System.IO.File]::Exists($DLLPath))
					{
						try
						{
							[Void][System.Reflection.Assembly]::LoadFile($DLLPath)
							New-LogRecord -EventType 'DEBUG' -Event $('JOB RUNSPACES. {0} Loaded.' -f $DLLPath)
						}
						catch
						{
							New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
						}
					}
				}
				$script:pResults = New-Object System.Collections.Specialized.OrderedDictionary
				foreach ($pFile in [Array]$script:FilesObj)
				{
					switch ($pFile.Type)
					{
						'Остатки'{
							try
							{
								$Results = ParseXlsx-KUAPRemains -File $pFile.FullName -FileType $pFile.Type
								$script:pResults[$pFile.Type] = $Results
								New-LogRecord -EventType 'DEBUG' -Event $('файл содержащий информацию по остаткам для ЮЛ и ФЛ: {0}.' -f $pFile.FullName)
							}
							catch
							{
								New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
							}
						};
						'Депозиты ЮЛ'{
							try
							{
								$Results = ParseXlsx-KUAPDeposit -File $pFile.FullName -FileType $pFile.Type -ClientType 'ЮЛ'
								$script:pResults[$pFile.Type] = $Results
								New-LogRecord -EventType 'DEBUG' -Event $('файл содержащий информацию по Депозитам ЮЛ: {0}.' -f $pFile.FullName)
							}
							catch
							{
								New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
							}
						};
						'Депозиты ФЛ'{
							try
							{
								$Results = ParseXlsx-KUAPDeposit -File $pFile.FullName -FileType $pFile.Type -ClientType 'ФЛ'
								$script:pResults[$pFile.Type] = $Results
								New-LogRecord -EventType 'DEBUG' -Event $('файл содержащий информацию по Депозитам ФЛ: {0}.' -f $pFile.FullName)
							}
							catch
							{
								New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
							}
						};
					}
				}
				
				if ($script:pResults.Count -gt 0)
				{
					New-LogRecord -EventType 'DEBUG' -Event $("script:pResults.Count {0}." -f $script:pResults.Count)
					$script:PreviewRObject = New-Object System.Collections.ArrayList
					if ($script:ExecuteMode -eq 'Insert')
					{
						$script:DocsStatus = New-Object System.Collections.ArrayList
						$script:MongoSrvObj = Get-MongoServer -HostName $script:MongoHost -Port $script:MongoPort
						New-LogRecord -EventType 'DEBUG' -Event 'Подключение к серверу MongoDB успешно.'
						$script:MongoDBObj = Get-MongoDatabase -MongoServer $script:MongoSrvObj -DatabaseName $script:MongoDatabase
						New-LogRecord -EventType 'DEBUG' -Event $('Найдена БД "{0}".' -f $script:MongoDatabase)
					}
					
					foreach ($rKey in $script:pResults.Keys)
					{
						try
						{
							New-LogRecord -EventType 'DEBUG' -Event $("ParseHolders-And-InsertToDB -Mode {0} for {1}." -f $script:ExecuteMode, $rKey)
							ParseHolders-And-InsertToDB -ObjectHolder $script:pResults[$rKey] -Mode $script:ExecuteMode;
						}
						catch
						{
							New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
						}
					}
					
					if ($script:ExecuteMode -eq 'Preview')
					{
						[System.Collections.ArrayList]$Output = $script:PreviewRObject |
						Select-Object @{
							l = 'Тип клиента';
							e = { switch ($_.ClientType) { 1{ 'ЮЛ' }; 2{ 'ИП' }; } }
						}, @{ l = 'Продукт'; e = { $script:DepositHolder[$_.Product] } },
						Currency,
						VolumeMin,
						VolumeMax, @{
							l = 'Переодичность';
							e = { switch ($_.PercentPeriod) { 'E'{ 'В конце срока' }; 'M'{ 'Ежемесячно' }; } }
						},
						Months,
						BeginDays,
						EndDays,
						Rate
						Write-Output $Output
					}
					if ($script:ExecuteMode -eq 'Insert')
					{
						[System.Collections.ArrayList]$Output = $script:DocsStatus | Select-Object Id, Status
						Write-Output $Output
					}
				}
			}
			catch
			{
				New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
			}
		}`
					   -CompletedScript {
			Param ($Job)
			[System.Collections.ArrayList]$results = Receive-Job -Job $Job | Select-Object $script:Properties
			if ($results.Count -gt 0)
			{
				switch ($script:ExecuteMode)
				{
					'Preview' {
						Call-DataPreview_psf -DataSource $results
						New-LogRecord -EventType 'DEBUG' -Event 'Preview completed.'
					}
					'Insert' {
						$Source = ConvertTo-DataTable -InputObject $results
						$datagridviewInsertResults.DataSource = $Source
						
						$DGVEC = 0
						
						foreach ($RN in $(0..$datagridviewInsertResults.RowCount))
						{
							$DGVCell = $datagridviewInsertResults.Rows[$RN].Cells[1].Value
							$DGVCellColor = switch ($DGVCell)
							{
								'OK'{ [System.Drawing.Color]::LightGreen }
								'ERROR'{ [System.Drawing.Color]::Tomato; $DGVEC++ }
								default { $datagridviewInsertResults.Rows[$RN].Cells[1].Style.BackColor }
							}
							$datagridviewInsertResults.Rows[$RN].Cells[1].Style.BackColor = $DGVCellColor
						}
						
						New-LogRecord -EventType 'DEBUG' -Event 'Insert completed.'
						New-LogRecord -EventType 'DEBUG' -Event $('Insert errors {0}.' -f $DGVEC)
						New-LogRecord -EventType 'DEBUG' -Event $('EnableReporting {0}.' -f $script:EnableReporting)
					}
				}
			}
			
			$radiobuttonPreview.Enabled = $true
			$radiobuttonInsertToDB.Enabled = $true
			
			$groupboxScan.Enabled = $true
			$groupboxScanResults.Enabled = $true
			
			$buttonStartJob.ImageIndex = -1
			$buttonStartJob.Enabled = $true
					
			if ($script:ApplicationMode -eq 'Auto')
			{
				$StateSB = New-Object System.Text.StringBuilder
				if ($script:RestartService)
				{
					[wmi]$wmi = Get-WmiObject -Class Win32_Service -Filter $("Name='{0}'" -f $script:RestartService)
					New-LogRecord -EventType 'DEBUG' -Event $('Поиск службы "{0}".' -f $script:RestartService)
					if ($wmi)
					{
						if ($wmi.State -ne 'Stopped')
						{
							$StopService = $wmi.StopService()
							if ($StopService.ReturnValue -eq 0)
							{
								New-LogRecord -EventType 'DEBUG' -Event $("Служба {0} останавливается." -f $script:RestartService)
								$StateSB.AppendLine($("<p>{0} Служба {1} останавливается</p>" -f [datetime]::Now, $script:RestartService))
								$StateCheck = Wait-ForServiceState -ServiceName $script:RestartService -State Stopped -TickMs 1000 -AttemptsNum 10
								if ($StateCheck)
								{
									$StateCheck = $null
									New-LogRecord -EventType 'DEBUG' -Event $("Служба {0} остановлена." -f $script:RestartService)
									$StateSB.AppendLine($("<p>{0} Служба {1} остановлена</p>" -f [datetime]::Now, $script:RestartService))
									$StartService = $wmi.StartService()
									if ($StartService.ReturnValue -eq 0)
									{
										New-LogRecord -EventType 'DEBUG' -Event $("Служба {0} запускается." -f $script:RestartService)
										$StateSB.AppendLine($("<p>{0} Служба {1} запускается</p>" -f [datetime]::Now, $script:RestartService))
										$StateCheck = Wait-ForServiceState -ServiceName $script:RestartService -State Running -TickMs 1000 -AttemptsNum 10
										if ($StateCheck)
										{
											$StateCheck = $null
											New-LogRecord -EventType 'DEBUG' -Event $("Служба {0} запущена." -f $script:RestartService)
											$StateSB.AppendLine($("<p>{0} Служба {1} запущена</p>" -f [datetime]::Now, $script:RestartService))
										}
									}
									else
									{
										New-LogRecord -EventType 'ERROR' -Event $("Ошибка запуска службы {0}. ReturnValue {1}." -f $script:RestartService, $StartService.ReturnValue)
										$StateSB.AppendLine($("<p>{0} Ошибка запуска службы {1}. ReturnValue {2}</p>" -f [datetime]::Now, $script:RestartService, $StartService.ReturnValue))
									}
								}
								else
								{
									New-LogRecord -EventType 'ERROR' -Event $("Ошибка остановки службы {0}." -f $script:RestartService)
									$StateSB.AppendLine($("<p>{0} Ошибка остановки службы {1}</p>" -f [datetime]::Now, $script:RestartService))
								}
							}
							else
							{
								New-LogRecord -EventType 'ERROR' -Event $("Ошибка остановки службы {0}. ReturnValue {1}." -f $script:RestartService, $StartService.ReturnValue)
								$StateSB.AppendLine($("<p>{0} Ошибка остановки службы {1}. ReturnValue {2}</p>" -f [datetime]::Now, $script:RestartService, $StartService.ReturnValue))
							}
						}
						else
						{
							New-LogRecord -EventType 'DEBUG' -Event $("Служба {0} остановлена." -f $script:RestartService)
							$StateSB.AppendLine($("<p>{0} Служба {1} остановлена</p>" -f [datetime]::Now, $script:RestartService))
							$StartService = $wmi.StartService()
							if ($StartService.ReturnValue -eq 0)
							{
								New-LogRecord -EventType 'DEBUG' -Event $("Служба {0} запускается." -f $script:RestartService)
								$StateSB.AppendLine($("<p>{0} Служба {1} запускается</p>" -f [datetime]::Now, $script:RestartService))
								$StateCheck = Wait-ForServiceState -ServiceName $script:RestartService -State Running -TickMs 1000 -AttemptsNum 10
								if ($StateCheck)
								{
									$StateCheck = $null
									New-LogRecord -EventType 'DEBUG' -Event $("Служба {0} запущена." -f $script:RestartService)
									$StateSB.AppendLine($("<p>{0} Служба {1} запущена</p>" -f [datetime]::Now, $script:RestartService))
								}
							}
							else
							{
								New-LogRecord -EventType 'ERROR' -Event $("Ошибка запуска службы {0}. ReturnValue {1}." -f $script:RestartService, $StartService.ReturnValue)
								$StateSB.AppendLine($("<p>{0} Ошибка запуска службы {1}. ReturnValue {2}</p>" -f [datetime]::Now, $script:RestartService, $StartService.ReturnValue))
							}
						}
						[wmi]$wmi = Get-WmiObject -Class Win32_Service -Filter $("Name='{0}'" -f $script:RestartService)
						New-LogRecord -EventType 'DEBUG' -Event $('Служба {0} находится в состоянии {1}.' -f $script:RestartService, $wmi.State)
						$StateSB.AppendLine($("<p>{0} Служба {1} находится в состоянии {2}</p>" -f [datetime]::Now, $script:RestartService, $wmi.State))
					}
					else
					{
						New-LogRecord -EventType 'DEBUG' -Event $("RestartService {0} не найден." -f $script:RestartService)
						$StateSB.AppendLine($("<p>{0} RestartService {1} не найден</p>" -f [datetime]::Now, $script:RestartService))
					}
				}
				else
				{
					New-LogRecord -EventType 'DEBUG' -Event "RestartService не указан."
					$StateSB.AppendLine($('<p>{0} RestartService не указан</p>' -f [datetime]::Now))
				}
			}
			
			if ($script:EnableReporting -and $script:ExecuteMode -eq 'Insert')
			{
				if ($script:MailProperties.To -and $script:MailProperties.Subject -and $script:MailProperties.From)
				{
					try
					{
						$ExtraInformation = '<p>Дополнительная информация:</p>'
						if ($DGVEC -gt 0)
						{
							$ExtraInformation += [System.Environment]::NewLine
							$ExtraInformation += $('<p>Количество ошибок: {0}.</p>' -f $DGVEC)
						}
						if ($StateSB)
						{
							$ExtraInformation += [System.Environment]::NewLine
							$ExtraInformation += $StateSB.ToString()
						}
						$Body = Set-HTMLMessage -InsertionStatus $results -Information $ExtraInformation
						$LogFileToAttachments = Join-Path $script:WorkingDirectory $script:LogPattern
						Send-MailMessage @script:MailProperties -BodyAsHtml -Body "$Body" -Attachments $LogFileToAttachments
						New-LogRecord -EventType 'DEBUG' -Event $('MailMessage sent to: {0}.' -f $([String]::Join([Char]59, $script:MailProperties.To)))
						if ($script:MailProperties.Cc) { New-LogRecord -EventType 'DEBUG' -Event $('MailMessage sent Cc to: {0}.' -f $([String]::Join([Char]59, $script:MailProperties.Cc))) }
						if ($script:MailProperties.Bcc) { New-LogRecord -EventType 'DEBUG' -Event $('MailMessage sent Bcc to: {0}.' -f $([String]::Join([Char]59, $script:MailProperties.Bcc))) }
					}
					catch
					{
						New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
						foreach ($MPKey in @($script:MailProperties.Keys))
						{
							New-LogRecord -EventType 'DEBUG' -Event $("script:MailProperties key: {0} value: {1}" -f $MPKey, $script:MailPropertie[$MPKey])
						}
					}
				}
				else
				{
					New-LogRecord -EventType 'DEBUG' -Event 'Недостаточно параметров для отправки Email.'
					foreach ($MPKey in @($script:MailProperties.Keys))
					{
						New-LogRecord -EventType 'DEBUG' -Event $("script:MailProperties key: {0} value: {1}" -f $MPKey, $script:MailPropertie[$MPKey])
					}
				}
			}
			
			if ($script:ApplicationMode -ne 'Auto' -and $DGVEC -gt 0)
			{
				$DGVECText = 'Количество ошибок: {0}.' -f $DGVEC
				$DGVECText += [System.Environment]::NewLine
				$DGVECText += 'Подробная информация отражена в лог файле.'
				[System.Windows.Forms.MessageBox]::Show($DGVECText, 'В процессе импорта возникли ошибки.')
				New-LogRecord -EventType 'DEBUG' -Event 'Import errors MessageBox closed.'
			}
			
			$DGVEC = $null
			
			if ($script:ApplicationMode -eq 'Auto') { $MainForm.Close() }
		}`
					   -UpdateScript {
			Param ($Job)
			if ($buttonStartJob.ImageList -ne $null)
			{
				if ($buttonStartJob.ImageIndex -lt $buttonStartJob.ImageList.Images.Count - 1)
				{
					$buttonStartJob.ImageIndex += 1
				}
				else
				{
					$buttonStartJob.ImageIndex = 0
				}
			}
		} -ArgumentList $Arguments
	}
	
	$formMain_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		New-LogRecord -EventType 'DEBUG' -Event 'formMain_FormClosed.'
		$notifyicon.Visible = $false
		$notifyicon.Dispose()
		[System.GC]::Collect();
		[System.GC]::WaitForPendingFinalizers();
		Stop-JobTracker
		if ($script:ApplicationMode -eq 'Auto' -and $script:NewFilesToProceed)
		{
			[Void][System.Diagnostics.Process]::Start([System.Windows.Forms.Application]::ExecutablePath, '-Mode Auto')
		}
	}
	
	$timerJobTracker_Tick = {
		Update-JobTracker
	}
	
	$JobTrackerList = New-Object System.Collections.ArrayList
	function Add-JobTracker
	{
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[string]$Name,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[ScriptBlock]$JobScript,
			$ArgumentList = $null,
			[ScriptBlock]$CompletedScript,
			[ScriptBlock]$UpdateScript)
		
		$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
		
		if ($job -ne $null)
		{
			$members = @{
				"Job" = $Job;
				"CompleteScript" = $CompletedScript;
				"UpdateScript" = $UpdateScript
			}
			
			$psObject = New-Object System.Management.Automation.PSObject -Property $members
			
			[void]$JobTrackerList.Add($psObject)
			
			#Start the Timer
			if (-not $timerJobTracker.Enabled)
			{
				$timerJobTracker.Start()
			}
		}
		elseif ($CompletedScript -ne $null)
		{
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
		
	}
	
	function Update-JobTracker
	{
		$timerJobTracker.Stop()
		
		for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
		{
			$psObject = $JobTrackerList[$index]
			
			if ($psObject -ne $null)
			{
				if ($psObject.Job -ne $null)
				{
					if ($psObject.Job.State -ne "Running")
					{
						#Call the Complete Script Block
						if ($psObject.CompleteScript -ne $null)
						{
							#$results = Receive-Job -Job $psObject.Job
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
						}
						
						$JobTrackerList.RemoveAt($index)
						Remove-Job -Job $psObject.Job
						$index--
					}
					elseif ($psObject.UpdateScript -ne $null)
					{
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
					}
				}
			}
			else
			{
				$JobTrackerList.RemoveAt($index)
				$index--
			}
		}
		
		if ($JobTrackerList.Count -gt 0)
		{
			$timerJobTracker.Start()
		}
	}
	
	function Stop-JobTracker
	{
		$timerJobTracker.Stop()
		while ($JobTrackerList.Count -gt 0)
		{
			$job = $JobTrackerList[0].Job
			$JobTrackerList.RemoveAt(0)
			Stop-Job $job
			Remove-Job $job
		}
	}
	
	$MainForm_KeyDown = [System.Windows.Forms.KeyEventHandler]{
		if ($_.Shift -eq $true -and $_.KeyCode -eq 'F1')
		{
			New-LogRecord -EventType 'DEBUG' -Event 'MainForm_KeyDown.'
			Call-ServiceControl_psf
		}
	}
	
	$MainForm_Resize={
		if ($MainForm.WindowState -eq 'Minimized')
		{
			$notifyicon.Visible = $true;
			$MainForm.Opacity = 0
		}
		else
		{
			$notifyicon.Visible = $false;
			$MainForm.Opacity = 1
		}
	}
	
	$notifyicon_MouseDoubleClick=[System.Windows.Forms.MouseEventHandler]{
		$MainForm.WindowState = 'Normal'
	}
	
	$развернутьОкноПрограммыToolStripMenuItem_Click={
		$MainForm.WindowState = 'Normal'
	}
	
	$закрытьПрограммуToolStripMenuItem_Click={
		New-LogRecord -EventType 'DEBUG' -Event 'formMain_FormClosed From Tray.'
		$MainForm.Close()
	}
	$datagridviewScanResults_DataError=[System.Windows.Forms.DataGridViewDataErrorEventHandler]{
		New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
	}
	
	$datagridviewInsertResults_DataError=[System.Windows.Forms.DataGridViewDataErrorEventHandler]{
		New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
	}
	
	$TimerAutoModeMinimize_Tick={
		$MainForm.WindowState = 'Minimized'
		$TimerAutoModeMinimize.Stop()
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_radiobuttonInsertToDB = $radiobuttonInsertToDB.Checked
		$script:MainForm_radiobuttonPreview = $radiobuttonPreview.Checked
		$script:MainForm_textboxFolder = $textboxFolder.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$datagridviewInsertResults.remove_DataError($datagridviewInsertResults_DataError)
			$buttonStartJob.remove_Click($buttonStartJob_Click)
			$datagridviewScanResults.remove_DataError($datagridviewScanResults_DataError)
			$buttonScanFolder.remove_Click($buttonScanFolder_Click)
			$buttonBrowseFolder.remove_Click($buttonBrowseFolder_Click)
			$MainForm.remove_FormClosed($formMain_FormClosed)
			$MainForm.remove_Load($OnLoadFormEvent)
			$MainForm.remove_KeyDown($MainForm_KeyDown)
			$MainForm.remove_Resize($MainForm_Resize)
			$timerJobTracker.remove_Tick($timerJobTracker_Tick)
			$notifyicon.remove_MouseDoubleClick($notifyicon_MouseDoubleClick)
			$развернутьОкноПрограммыToolStripMenuItem.remove_Click($развернутьОкноПрограммыToolStripMenuItem_Click)
			$закрытьПрограммуToolStripMenuItem.remove_Click($закрытьПрограммуToolStripMenuItem_Click)
			$TimerAutoModeMinimize.remove_Tick($TimerAutoModeMinimize_Tick)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$groupboxInsertProgress.SuspendLayout()
	$groupboxParse.SuspendLayout()
	$groupboxScanResults.SuspendLayout()
	$groupboxScan.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($groupboxInsertProgress)
	$MainForm.Controls.Add($groupboxParse)
	$MainForm.Controls.Add($groupboxScanResults)
	$MainForm.Controls.Add($groupboxScan)
	$MainForm.ClientSize = '716, 473'
	#region Binary Data
	$MainForm.Icon = [System.Convert]::FromBase64String('
AAABAAEAICAQ/wAAAADoAgAAFgAAACgAAAAgAAAAQAAAAAEABAAAAAAAgAIAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA
/wD/AP//AAD///8AMzczNzOzszs7OzM3szMzM3O3MzM7u7u7MzMzMzczN7M7s7Mzu7u7u7uzMzMz
MzO7MzOzO7O7u7u7uzM7MzMzOzMzO7u7u7u7u7u7uzMzO7szMzM7Mzu7u7u7u7szMzu7MzOzEzMz
Mzu7O7u7u7u7uzN7uzNwATARAzMzezu7u7t4d3AHMwAXAAAAATMzczO7h3c3AzADEBAHAAcDMTED
A4GHcAAwAwBwAAAAFzAQBxdxdwADADAAEAAAAQMAAAAHcAcjAAEAAQAAAAMQAQAAAHAIAzAQABMA
AAADEDAAMHdwAAAAAAAAMAAwEzAQADcXcAAAAAAAAAADMDMQAABwcYAAAAAAAAADAAEzEAAAMDFw
AAAXAAAAAYAxMTMAABFzAwAAAAAAA4cAETMQAAAQOAEAAQEAcACBATMxEBAIE4AAeIMQgHCIgACD
c3MIiIfwiIiDNzCIiIg4iIMwiIiIh4iIiIhwiIiIiIiDCIiIiIiIiIiIN4iIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIh4iIiIiIh3eIiIiIiIiIiId3d3h3d3iHeIiIiIiIiIeHd3eId3
eIiIiIh3iId3eHcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==')
	#endregion
	$MainForm.KeyPreview = $True
	$MainForm.MinimumSize = '724, 500'
	$MainForm.Name = "MainForm"
	$MainForm.ShowIcon = $False
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "РСХБ-Дилинг. КУАП Помогатор."
	$MainForm.add_FormClosed($formMain_FormClosed)
	$MainForm.add_Load($OnLoadFormEvent)
	$MainForm.add_KeyDown($MainForm_KeyDown)
	$MainForm.add_Resize($MainForm_Resize)
	#
	# groupboxInsertProgress
	#
	$groupboxInsertProgress.Controls.Add($datagridviewInsertResults)
	$groupboxInsertProgress.Dock = 'Fill'
	$groupboxInsertProgress.Location = '0, 258'
	$groupboxInsertProgress.Name = "groupboxInsertProgress"
	$groupboxInsertProgress.Size = '716, 215'
	$groupboxInsertProgress.TabIndex = 8
	$groupboxInsertProgress.TabStop = $False
	#
	# datagridviewInsertResults
	#
	$datagridviewInsertResults.AllowUserToAddRows = $False
	$datagridviewInsertResults.AllowUserToDeleteRows = $False
	$datagridviewInsertResults.AllowUserToResizeColumns = $False
	$datagridviewInsertResults.AllowUserToResizeRows = $False
	$System_Windows_Forms_DataGridViewCellStyle_1 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_1.Alignment = 'MiddleCenter'
	$System_Windows_Forms_DataGridViewCellStyle_1.BackColor = '224, 224, 224'
	$datagridviewInsertResults.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridviewInsertResults.AutoSizeColumnsMode = 'Fill'
	$datagridviewInsertResults.AutoSizeRowsMode = 'AllCells'
	$System_Windows_Forms_DataGridViewCellStyle_2 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_2.Alignment = 'MiddleCenter'
	$System_Windows_Forms_DataGridViewCellStyle_2.BackColor = 'Control'
	$System_Windows_Forms_DataGridViewCellStyle_2.Font = "Microsoft Sans Serif, 8.25pt"
	$System_Windows_Forms_DataGridViewCellStyle_2.ForeColor = 'WindowText'
	$System_Windows_Forms_DataGridViewCellStyle_2.SelectionBackColor = 'Highlight'
	$System_Windows_Forms_DataGridViewCellStyle_2.SelectionForeColor = 'HighlightText'
	$System_Windows_Forms_DataGridViewCellStyle_2.WrapMode = 'True'
	$datagridviewInsertResults.ColumnHeadersDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridviewInsertResults.ColumnHeadersHeightSizeMode = 'DisableResizing'
	$System_Windows_Forms_DataGridViewCellStyle_3 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_3.Alignment = 'MiddleCenter'
	$System_Windows_Forms_DataGridViewCellStyle_3.BackColor = 'Window'
	$System_Windows_Forms_DataGridViewCellStyle_3.Font = "Microsoft Sans Serif, 8.25pt"
	$System_Windows_Forms_DataGridViewCellStyle_3.ForeColor = 'ControlText'
	$System_Windows_Forms_DataGridViewCellStyle_3.SelectionBackColor = 'Highlight'
	$System_Windows_Forms_DataGridViewCellStyle_3.SelectionForeColor = 'HighlightText'
	$System_Windows_Forms_DataGridViewCellStyle_3.WrapMode = 'False'
	$datagridviewInsertResults.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_3
	$datagridviewInsertResults.Dock = 'Fill'
	$datagridviewInsertResults.Location = '3, 16'
	$datagridviewInsertResults.Name = "datagridviewInsertResults"
	$datagridviewInsertResults.ReadOnly = $True
	$datagridviewInsertResults.RowHeadersDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridviewInsertResults.RowHeadersVisible = $False
	$datagridviewInsertResults.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridviewInsertResults.SelectionMode = 'FullRowSelect'
	$datagridviewInsertResults.Size = '710, 196'
	$datagridviewInsertResults.TabIndex = 2
	$datagridviewInsertResults.add_DataError($datagridviewInsertResults_DataError)
	#
	# groupboxParse
	#
	$groupboxParse.Controls.Add($radiobuttonInsertToDB)
	$groupboxParse.Controls.Add($radiobuttonPreview)
	$groupboxParse.Controls.Add($buttonStartJob)
	$groupboxParse.Dock = 'Top'
	$groupboxParse.Enabled = $False
	$groupboxParse.Location = '0, 208'
	$groupboxParse.Name = "groupboxParse"
	$groupboxParse.Size = '716, 50'
	$groupboxParse.TabIndex = 7
	$groupboxParse.TabStop = $False
	#
	# radiobuttonInsertToDB
	#
	$radiobuttonInsertToDB.Anchor = 'Top, Bottom, Right'
	$radiobuttonInsertToDB.Location = '577, 16'
	$radiobuttonInsertToDB.Name = "radiobuttonInsertToDB"
	$radiobuttonInsertToDB.Size = '127, 25'
	$radiobuttonInsertToDB.TabIndex = 2
	$radiobuttonInsertToDB.Text = "Вставка в БД"
	$radiobuttonInsertToDB.UseVisualStyleBackColor = $True
	#
	# radiobuttonPreview
	#
	$radiobuttonPreview.Anchor = 'Top, Bottom, Left'
	$radiobuttonPreview.Checked = $True
	$radiobuttonPreview.Location = '12, 16'
	$radiobuttonPreview.Name = "radiobuttonPreview"
	$radiobuttonPreview.Size = '139, 25'
	$radiobuttonPreview.TabIndex = 1
	$radiobuttonPreview.TabStop = $True
	$radiobuttonPreview.Text = "Предпросмотр"
	$radiobuttonPreview.UseVisualStyleBackColor = $True
	#
	# buttonStartJob
	#
	$buttonStartJob.Anchor = 'Top, Bottom, Left, Right'
	$buttonStartJob.ImageList = $imagelistButtonBusyAnimation
	$buttonStartJob.Location = '157, 18'
	$buttonStartJob.Name = "buttonStartJob"
	$buttonStartJob.Size = '407, 23'
	$buttonStartJob.TabIndex = 0
	$buttonStartJob.Text = "Выполнить"
	$buttonStartJob.TextImageRelation = 'ImageBeforeText'
	$buttonStartJob.UseVisualStyleBackColor = $True
	$buttonStartJob.add_Click($buttonStartJob_Click)
	#
	# groupboxScanResults
	#
	$groupboxScanResults.Controls.Add($datagridviewScanResults)
	$groupboxScanResults.Dock = 'Top'
	$groupboxScanResults.Location = '0, 72'
	$groupboxScanResults.Name = "groupboxScanResults"
	$groupboxScanResults.Size = '716, 136'
	$groupboxScanResults.TabIndex = 6
	$groupboxScanResults.TabStop = $False
	#
	# datagridviewScanResults
	#
	$datagridviewScanResults.AllowUserToAddRows = $False
	$datagridviewScanResults.AllowUserToDeleteRows = $False
	$datagridviewScanResults.AllowUserToResizeColumns = $False
	$datagridviewScanResults.AllowUserToResizeRows = $False
	$datagridviewScanResults.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridviewScanResults.AutoSizeColumnsMode = 'Fill'
	$datagridviewScanResults.AutoSizeRowsMode = 'AllCells'
	$datagridviewScanResults.ColumnHeadersDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridviewScanResults.ColumnHeadersHeightSizeMode = 'DisableResizing'
	$datagridviewScanResults.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_3
	$datagridviewScanResults.Dock = 'Fill'
	$datagridviewScanResults.Location = '3, 16'
	$datagridviewScanResults.Name = "datagridviewScanResults"
	$datagridviewScanResults.ReadOnly = $True
	$datagridviewScanResults.RowHeadersDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridviewScanResults.RowHeadersVisible = $False
	$datagridviewScanResults.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridviewScanResults.SelectionMode = 'FullRowSelect'
	$datagridviewScanResults.Size = '710, 117'
	$datagridviewScanResults.TabIndex = 1
	$datagridviewScanResults.add_DataError($datagridviewScanResults_DataError)
	#
	# groupboxScan
	#
	$groupboxScan.Controls.Add($buttonScanFolder)
	$groupboxScan.Controls.Add($buttonBrowseFolder)
	$groupboxScan.Controls.Add($textboxFolder)
	$groupboxScan.Dock = 'Top'
	$groupboxScan.Location = '0, 0'
	$groupboxScan.Name = "groupboxScan"
	$groupboxScan.Size = '716, 72'
	$groupboxScan.TabIndex = 5
	$groupboxScan.TabStop = $False
	#
	# buttonScanFolder
	#
	$buttonScanFolder.Dock = 'Bottom'
	$buttonScanFolder.Location = '3, 46'
	$buttonScanFolder.Name = "buttonScanFolder"
	$buttonScanFolder.Size = '710, 23'
	$buttonScanFolder.TabIndex = 5
	$buttonScanFolder.Text = "Сканировать директорию"
	$buttonScanFolder.UseVisualStyleBackColor = $True
	$buttonScanFolder.add_Click($buttonScanFolder_Click)
	#
	# buttonBrowseFolder
	#
	$buttonBrowseFolder.Anchor = 'Top, Bottom, Right'
	$buttonBrowseFolder.Location = '606, 18'
	$buttonBrowseFolder.Name = "buttonBrowseFolder"
	$buttonBrowseFolder.Size = '107, 21'
	$buttonBrowseFolder.TabIndex = 4
	$buttonBrowseFolder.Text = "..."
	$buttonBrowseFolder.UseVisualStyleBackColor = $True
	$buttonBrowseFolder.add_Click($buttonBrowseFolder_Click)
	#
	# textboxFolder
	#
	$textboxFolder.Anchor = 'Top, Bottom, Left, Right'
	$textboxFolder.AutoCompleteMode = 'SuggestAppend'
	$textboxFolder.AutoCompleteSource = 'FileSystemDirectories'
	$textboxFolder.Location = '3, 19'
	$textboxFolder.Name = "textboxFolder"
	$textboxFolder.Size = '597, 20'
	$textboxFolder.TabIndex = 3
	#
	# folderbrowserdialog1
	#
	#
	# imagelistButtonBusyAnimation
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAB2CgAAAk1TRnQBSQFMAgEBCAEAAcABAAHAAQABEAEAARABAAT/ASEBAAj/AUIBTQE2
BwABNgMAASgDAAFAAwABMAMAAQEBAAEgBgABMP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/
AP8AugADwgH/AyoB/wMqAf8DwgH/MAADwgH/A0oB/wOCAf8DwgH/sAADKgH/AwAB/wMAAf8DKgH/
MAADggH/AyoB/wMqAf8DSgH/gAADwgH/AyoB/wMqAf8DwgH/IAADKgH/AwAB/wMAAf8DKgH/A8IB
/wNKAf8DggH/A8IB/xAAA8IB/wMqAf8DKgH/A8IB/wNKAf8DKgH/AyoB/wNKAf8EAAOSAf8DkgH/
A8IB/3AAAyoB/wMAAf8DAAH/AyoB/yAAA8IB/wMqAf8DKgH/A8IB/wOCAf8DKgH/AyoB/wOCAf8Q
AAMqAf8DAAH/AwAB/wMqAf8DwgH/A0oB/wOCAf8DwgH/A5IB/wOCAf8DggH/A5IB/3AAAyoB/wMA
Af8DAAH/AyoB/zAAA0oB/wMqAf8DKgH/A0oB/xAAAyoB/wMAAf8DAAH/AyoB/xAAA5IB/wOSAf8D
kgH/A8IB/3AAA8IB/wMqAf8DKgH/A8IB/zAAA8IB/wNKAf8DggH/A8IB/xAAA8IB/wMqAf8DKgH/
A8IB/xAAA8IB/wOSAf8DkgH/A8IB/zgAA8IB/wMqAf8DKgH/A8IB/zAAA8IB/wOCAf8DSgH/A8IB
/zAAA8IB/wPCAf8DkgH/A8IB/zQAA8IB/wPCAf80AAMqAf8DAAH/AwAB/wMqAf8wAANKAf8DKgH/
AyoB/wNKAf8wAAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf8wAAMqAf8DAAH/AwAB
/wMqAf8wAAOCAf8DKgH/AyoB/wOCAf8wAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPC
Af8wAAPCAf8DKgH/AyoB/wPCAf8wAAPCAf8DggH/A0oB/wPCAf8wAAPCAf8DkgH/A5IB/wPCAf80
AAPCAf8DwgH/EAADwgH/A8IB/xQAA8IB/wOCAf8DSgH/A8IB/zAAA8IB/wOSAf8DkgH/A8IB/zQA
A8IB/wPCAf9UAAPCAf8DwgH/A8IB/wPCAf8QAANKAf8DKgH/AyoB/wNKAf8wAAOSAf8DggH/A5IB
/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf9QAAPCAf8DwgH/A8IB/wPCAf8DwgH/A8IB/wOSAf8DwgH/
A4IB/wMqAf8DKgH/A4IB/yQAA8IB/wPCAf8EAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB
/wPCAf9UAAPCAf8DwgH/BAADkgH/A4IB/wOCAf8DkgH/A8IB/wOCAf8DSgH/A8IB/yAAA8IB/wPC
Af8DwgH/A8IB/wPCAf8DkgH/A5IB/wPCAf80AAPCAf8DwgH/ZAADkgH/A5IB/wOSAf8DkgH/MAAD
wgH/A8IB/wPCAf8DwgH/sAADwgH/A5IB/wOSAf8DwgH/NAADwgH/A8IB/7QAA8IB/wPCAf8DkgH/
A8IB/zQAA8IB/wPCAf+0AAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf+gAAPCAf8D
SgH/A4IB/wPCAf8DkgH/A5IB/wOSAf8DwgH/BAADwgH/A8IB/xQAA8IB/wPCAf8DkgH/A8IB/wPC
Af8DwgH/A8IB/wPCAf8kAAPCAf8DwgH/dAADggH/AyoB/wMqAf8DggH/A8IB/wOSAf8DkgH/A8IB
/wPCAf8DwgH/A8IB/wPCAf8QAAOSAf8DggH/A4IB/wOSAf8EAAPCAf8DwgH/JAADwgH/A8IB/wPC
Af8DwgH/cAADSgH/AyoB/wMqAf8DggH/EAADwgH/A8IB/wPCAf8DwgH/EAADkgH/A5IB/wOSAf8D
kgH/MAADwgH/A8IB/wPCAf8DwgH/cAADwgH/A0oB/wNKAf8DwgH/FAADwgH/A8IB/xQAA8IB/wOS
Af8DkgH/A8IB/zQAA8IB/wPCAf9sAAPCAf8DKgH/AyoB/wPCAf8wAAPCAf8DSgH/A4IB/wPCAf8w
AAPCAf8DwgH/A5IB/wPCAf80AAPCAf8DwgH/NAADKgH/AwAB/wMAAf8DKgH/MAADggH/AyoB/wMq
Af8DSgH/MAADkgH/A4IB/wOCAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/MAADKgH/AwAB/wMAAf8D
KgH/MAADSgH/AyoB/wMqAf8DggH/MAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/
MAADwgH/AyoB/wMqAf8DwgH/MAADwgH/A0oB/wNKAf8DwgH/MAADwgH/A5IB/wOSAf8DwgH/NAAD
wgH/A8IB/3wAA8IB/wMqAf8DKgH/A8IB/zAAA8IB/wNKAf8DggH/A8IB/zAAA8IB/wPCAf8DkgH/
A8IB/xAAA8IB/wMqAf8DKgH/A8IB/1AAAyoB/wMAAf8DAAH/AyoB/zAAA4IB/wMqAf8DKgH/A0oB
/zAAA5IB/wOCAf8DggH/A5IB/xAAAyoB/wMAAf8DAAH/AyoB/1AAAyoB/wMAAf8DAAH/AyoB/zAA
A0oB/wMqAf8DKgH/A4IB/wOSAf8DKgH/AyoB/wPCAf8gAAOSAf8DkgH/A5IB/wOSAf8DwgH/A0oB
/wOCAf8DwgH/AyoB/wMAAf8DAAH/AyoB/1AAA8IB/wMqAf8DKgH/A8IB/zAAA8IB/wOCAf8DSgH/
A8IB/wMqAf8DAAH/AwAB/wMqAf8gAAPCAf8DkgH/A5IB/wPCAf8DggH/AyoB/wMqAf8DSgH/A8IB
/wMqAf8DKgH/A8IB/6AAAyoB/wMAAf8DAAH/AyoB/zAAA0oB/wMqAf8DKgH/A4IB/7AAA8IB/wMq
Af8DKgH/A8IB/zAAA8IB/wOCAf8DSgH/A8IB/xgAAUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEB
AAEBBQABgAEBFgAD/4EABP8B/AE/AfwBPwT/AfwBPwH8AT8D/wHDAfwBAwHAASMD/wHDAfwBAwHA
AQMD/wHDAf8DwwP/AcMB/wPDAf8B8AH/AfAB/wHwAf8B+QH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B
8AH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B+QHnAcMB/wHDAf8B5wL/AsMB/wHDAf8BwwL/AcABAwH+
AUMB/wHDAv8B5AEDAfwBAwH/AecC/wH8AT8B/AE/BP8B/AE/Af4BfwT/AfwBPwH+AX8E/wH8AT8B
/AE/BP8BwAEnAcABPwHnA/8BwAEDAcIBfwHDA/8DwwH/AcMD/wHDAecBwwH/AecD/wEPAf8BDwH/
AQ8B/wGfAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wGfA/8B
wwH/AcMB/wLDAv8BwwH/AcMB/wLDAv8BwwH/AcABPwHAAQMC/wHDAf8BwAE/AcABAwT/AfwBPwH8
AT8E/wH8AT8B/AE/Cw=='))
	#endregion
	$imagelistButtonBusyAnimation.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelistButtonBusyAnimation.TransparentColor = 'Transparent'
	#
	# timerJobTracker
	#
	$timerJobTracker.add_Tick($timerJobTracker_Tick)
	#
	# notifyicon
	#
	$notifyicon.ContextMenuStrip = $contextmenustrip
	#region Binary Data
	$notifyicon.Icon = [System.Convert]::FromBase64String('
AAABAAEAICAQ/wAAAADoAgAAFgAAACgAAAAgAAAAQAAAAAEABAAAAAAAgAIAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA
/wD/AP//AAD///8AMzczNzOzszs7OzM3szMzM3O3MzM7u7u7MzMzMzczN7M7s7Mzu7u7u7uzMzMz
MzO7MzOzO7O7u7u7uzM7MzMzOzMzO7u7u7u7u7u7uzMzO7szMzM7Mzu7u7u7u7szMzu7MzOzEzMz
Mzu7O7u7u7u7uzN7uzNwATARAzMzezu7u7t4d3AHMwAXAAAAATMzczO7h3c3AzADEBAHAAcDMTED
A4GHcAAwAwBwAAAAFzAQBxdxdwADADAAEAAAAQMAAAAHcAcjAAEAAQAAAAMQAQAAAHAIAzAQABMA
AAADEDAAMHdwAAAAAAAAMAAwEzAQADcXcAAAAAAAAAADMDMQAABwcYAAAAAAAAADAAEzEAAAMDFw
AAAXAAAAAYAxMTMAABFzAwAAAAAAA4cAETMQAAAQOAEAAQEAcACBATMxEBAIE4AAeIMQgHCIgACD
c3MIiIfwiIiDNzCIiIg4iIMwiIiIh4iIiIhwiIiIiIiDCIiIiIiIiIiIN4iIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIh4iIiIiIh3eIiIiIiIiIiId3d3h3d3iHeIiIiIiIiIeHd3eId3
eIiIiIh3iId3eHcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==')
	#endregion
	$notifyicon.Text = "РСХБ-Дилинг. КУАП Помогатор."
	$notifyicon.add_MouseDoubleClick($notifyicon_MouseDoubleClick)
	#
	# contextmenustrip
	#
	[void]$contextmenustrip.Items.Add($развернутьОкноПрограммыToolStripMenuItem)
	[void]$contextmenustrip.Items.Add($toolstripseparator1)
	[void]$contextmenustrip.Items.Add($закрытьПрограммуToolStripMenuItem)
	$contextmenustrip.Name = "contextmenustrip"
	$contextmenustrip.ShowImageMargin = $False
	$contextmenustrip.Size = '194, 32'
	#
	# развернутьОкноПрограммыToolStripMenuItem
	#
	$развернутьОкноПрограммыToolStripMenuItem.Name = "развернутьОкноПрограммыToolStripMenuItem"
	$развернутьОкноПрограммыToolStripMenuItem.Size = '193, 22'
	$развернутьОкноПрограммыToolStripMenuItem.Text = "Развернуть окно программы"
	$развернутьОкноПрограммыToolStripMenuItem.add_Click($развернутьОкноПрограммыToolStripMenuItem_Click)
	#
	# закрытьПрограммуToolStripMenuItem
	#
	$закрытьПрограммуToolStripMenuItem.Name = "закрытьПрограммуToolStripMenuItem"
	$закрытьПрограммуToolStripMenuItem.ShowShortcutKeys = $False
	$закрытьПрограммуToolStripMenuItem.Size = '193, 22'
	$закрытьПрограммуToolStripMenuItem.Text = "Закрыть программу"
	$закрытьПрограммуToolStripMenuItem.add_Click($закрытьПрограммуToolStripMenuItem_Click)
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = "toolstripseparator1"
	$toolstripseparator1.Size = '190, 6'
	#
	# TimerAutoModeMinimize
	#
	$TimerAutoModeMinimize.add_Tick($TimerAutoModeMinimize_Tick)
	$groupboxScan.ResumeLayout($false)
	$groupboxScanResults.ResumeLayout($false)
	$groupboxParse.ResumeLayout($false)
	$groupboxInsertProgress.ResumeLayout($false)
	$MainForm.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()
}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	$global:ErrorActionPreference = [System.Management.Automation.ActionPreference]::SilentlyContinue
	$script:WorkingDirectory = [System.IO.Path]::GetDirectoryName([System.Windows.Forms.Application]::ExecutablePath)
	$script:LibRoot = Join-Path $script:WorkingDirectory 'Lib'
	$script:AutoModeCurrent = Join-Path $script:WorkingDirectory 'AutoMode\Current'
	$script:AutoModeBuffer = Join-Path $script:WorkingDirectory 'AutoMode\Buffer'
	$script:AutoModePrevious = Join-Path $script:WorkingDirectory 'AutoMode\Previous'
	$script:XMLConfig = Join-Path $script:WorkingDirectory 'Config.xml'
	$script:Functions = Join-Path $script:LibRoot 'Functions.ps1'
	
	function Get-Prerequisites
	{
		$EC = 0
		$script:SB = New-Object System.Text.StringBuilder
		$MD5 = [System.Security.Cryptography.MD5]::Create()
		if ([System.IO.Directory]::Exists($script:LibRoot))
		{
			foreach ($DLL in @('EPPlus.dll', 'MongoDB.Bson.dll', 'MongoDB.Driver.dll'))
			{
				$DLLPath = Join-Path $script:LibRoot $DLL
				if ([System.IO.File]::Exists($DLLPath))
				{
					try
					{
						[System.Reflection.Assembly]::LoadFile($DLLPath)
					}
					catch
					{
						$EC++
						$script:SB.Append($('Ошибка загрузки библиотеки {0}.{1};' -f $DLLPath, $Error[0].Exception.Message))
						$script:SB.Append([System.Environment]::NewLine)
					}
				}
				else
				{
					$EC++
					$script:SB.Append($('Библиотека {0} не найдена;' -f $DLLPath))
					$script:SB.Append([System.Environment]::NewLine)
				}
			}
		}
		else
		{
			$EC++
			$script:SB.Append($('Директория {0} не найдена;' -f $script:LibRoot))
			$script:SB.Append([System.Environment]::NewLine)
		}
		if ([System.IO.File]::Exists($script:XMLConfig))
		{
			try
			{
				$Stream = [System.IO.File]::OpenRead($script:XMLConfig)
				$script:ConfigurationFileMD5Hash = [regex]::Replace([System.BitConverter]::ToString($MD5.ComputeHash($Stream)), [Char]45, [String]::Empty).ToLowerInvariant()
				$Stream.Close()
			}
			catch
			{
				$EC++ #возможно стоить убрать в качестве критической ошибки
				$script:SB.Append('Ошибка вычисления MD5 хеша для файла конфигурации;')
				$script:SB.Append([System.Environment]::NewLine)
			}
			try
			{
				[xml]$XML = Get-Content $script:XMLConfig
			}
			catch
			{
				$EC++
				$script:SB.Append('Ошибка формата XML файла;')
				$script:SB.Append([System.Environment]::NewLine)
			}
			if ($xml.KUAP_Helper)
			{
				if ($xml.KUAP_Helper.Mongo.Connection.Host)
				{
					$script:MongoHost = $xml.KUAP_Helper.Mongo.Connection.Host
				}
				else
				{
					$EC++
					$script:SB.Append('Не указан IP-адрес/имя сервера БД для подключения;')
					$script:SB.Append([System.Environment]::NewLine)
				}
				if ($xml.KUAP_Helper.Mongo.Connection.Port)
				{
					$script:MongoPort = $xml.KUAP_Helper.Mongo.Connection.Port
				}
				else
				{
					$EC++
					$script:SB.Append('Не указан порт сервера БД для подключения;')
					$script:SB.Append([System.Environment]::NewLine)
				}
				if ($xml.KUAP_Helper.Mongo.Database.Name)
				{
					$script:MongoDatabase = $xml.KUAP_Helper.Mongo.Database.Name
				}
				else
				{
					$EC++
					$script:SB.Append('Не указано имя БД для загрузки ставок;')
					$script:SB.Append([System.Environment]::NewLine)
				}
				if ($xml.KUAP_Helper.Mongo.Database.Collection.Name)
				{
					$script:MongoCollection = $xml.KUAP_Helper.Mongo.Database.Collection.Name
				}
				else
				{
					$EC++
					$script:SB.Append('Не указано имя коллекции для загрузки ставок;')
					$script:SB.Append([System.Environment]::NewLine)
				}
				if ($xml.KUAP_Helper.Rates)
				{
					if ($xml.KUAP_Helper.Rates.CurrenciesList)
					{
						if ($xml.KUAP_Helper.Rates.CurrenciesList.Currency.Count -gt 0)
						{
							$script:Currencies = New-Object System.Collections.Specialized.OrderedDictionary
							foreach ($xCurrency in [Array]$xml.KUAP_Helper.Rates.CurrenciesList.Currency)
							{
								$script:Currencies[$xCurrency.Name] = $xCurrency.Code
							}
						}
						else
						{
							$EC++
							$script:SB.Append('Отсутствуют параметры для валют (<Currency></Currency>);')
							$script:SB.Append([System.Environment]::NewLine)
						}
					}
					else
					{
						$EC++
						$script:SB.Append('Отсутствуют параметры для валют (<CurrenciesList></CurrenciesList>);')
						$script:SB.Append([System.Environment]::NewLine)
					}
					if ($xml.KUAP_Helper.Rates.ProductsList)
					{
						if ($xml.KUAP_Helper.Rates.ProductsList.Product.Count -gt 0)
						{
							$script:DepositHolder = New-Object System.Collections.Specialized.OrderedDictionary
							foreach ($xProduct in [Array]$xml.KUAP_Helper.Rates.ProductsList.Product)
							{
								$script:DepositHolder[$xProduct.Code] = $xProduct.Name
							}
						}
						else
						{
							$EC++
							$script:SB.Append('Отсутствуют параметры для продуктов (<Product></Product>);')
							$script:SB.Append([System.Environment]::NewLine)
						}
					}
					else
					{
						$EC++
						$script:SB.Append('Отсутствуют параметры для продуктов (<ProductsList></ProductsList>);')
						$script:SB.Append([System.Environment]::NewLine)
					}
					if ($xml.KUAP_Helper.Rates.TermsList)
					{
						if ($xml.KUAP_Helper.Rates.TermsList.Term.Count -gt 0)
						{
							$script:TermMonthHolder = New-Object System.Collections.Specialized.OrderedDictionary
							foreach ($xTerm in [Array]$xml.KUAP_Helper.Rates.TermsList.Term)
							{
								$script:TermMonthHolder[$xTerm.Name] = $xTerm.Code
							}
						}
						else
						{
							$EC++
							$script:SB.Append('Отсутствуют параметры для сроков продуктов (<Term></Term>);')
							$script:SB.Append([System.Environment]::NewLine)
						}
					}
					else
					{
						$EC++
						$script:SB.Append('Отсутствуют параметры для сроков продуктов (<TermsList></TermsList>);')
						$script:SB.Append([System.Environment]::NewLine)
					}
				}
				else
				{
					$EC++
					$script:SB.Append('Отсутствуют параметры для ставок (<Rates></Rates>);')
					$script:SB.Append([System.Environment]::NewLine)
				}
				if ($xml.KUAP_Helper.Parse.XLSX)
				{
					if ($xml.KUAP_Helper.Parse.XLSX.File.Count -gt 0)
					{
						$script:FilePatternHolder = New-Object System.Collections.Specialized.OrderedDictionary
						$script:FileSheetHolder = New-Object System.Collections.Specialized.OrderedDictionary
						foreach ($fFile in [Array]$xml.KUAP_Helper.Parse.XLSX.File)
						{
							$script:FilePatternHolder[$fFile.Type] = $fFile.Pattern
							if ($fFile.FileOption -and $fFile.FileOption.Sheet.Count -gt 0)
							{
								$script:FileSheetHolder[$fFile.Type] = New-Object System.Collections.ArrayList
								foreach ($sfFile in $fFile.FileOption.Sheet)
								{
									[Void]$script:FileSheetHolder[$fFile.Type].Add(
										[PSCustomObject]@{
											NamePattern = $sfFile.NamePattern;
											ClientType = $sfFile.ClientType;
											ProductCode = $sfFile.ProductCode;
										}
									)
								}
							}
						}
					}
					else
					{
						$EC++
						$script:SB.Append('Отсутствуют параметры для файлов (<File></File>);')
						$script:SB.Append([System.Environment]::NewLine)
						
					}
				}
				else
				{
					$EC++
					$script:SB.Append('Отсутствуют параметры для файлов (<XLSX></XLSX>);')
					$script:SB.Append([System.Environment]::NewLine)
				}
				
				$script:LogLevel = switch ($XML.KUAP_Helper.ApplicationOption.LogLevel)
				{
					'DEBUG'	{ $XML.KUAP_Helper.ApplicationOption.LogLevel }
					default { 'ERROR' }
				}
	
				$script:ImportMode = switch ($XML.KUAP_Helper.ApplicationOption.ImportMode)
				{
					'ADD'	{ $XML.KUAP_Helper.ApplicationOption.ImportMode }
					'REWRITE'	{ $XML.KUAP_Helper.ApplicationOption.ImportMode }
					default { 'FULL' }
				}
	
				$script:LogPattern = switch ($XML.KUAP_Helper.ApplicationOption.LogType)
				{
					'DAILY'	{ 'Log-{0}.txt' -f $(Get-Date -UFormat '%d%m%y') }
					'SESSION'	{ 'Log-{0}-{1}.txt' -f $PID, $(Get-Date -UFormat '%d%m%y%H%M%S') }
					default { 'Log.txt' }
				}
				
				$script:BackupCollection = switch ($XML.KUAP_Helper.ApplicationOption.BackupCollection)
				{
					'FALSE' { $false }
					default { $true }
				}
				
				$script:EnableReporting = switch ($XML.KUAP_Helper.ApplicationOption.EnableReporting)
				{
					'TRUE' { $true }
					default { $false }
				}
				
				$script:MailProperties = @{ }
				foreach ($p in @('Bcc', 'Cc', 'Encoding', 'From', 'Port', 'Priority', 'SmtpServer', 'Subject', 'To'))
				{
					if ($xml.KUAP_Helper.ReportingOption.$p)
					{
						$script:MailProperties.Add($p, $xml.KUAP_Helper.ReportingOption.$p)
					}
				}
				
				if ($xml.KUAP_Helper.ReportingOption.Username -and $xml.KUAP_Helper.ReportingOption.Password)
				{
					$Password = (ConvertTo-SecureString -String $xml.KUAP_Helper.ReportingOption.Password -AsPlainText -Force)
					$Credentials = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList @($xml.KUAP_Helper.ReportingOption.Username, $Password)
					$script:MailProperties.Add('Credentials', $Credentials)
				}
				
				$script:RestartService = $xml.KUAP_Helper.AutoMode.RestartService
				
				[String[]]$script:ScanDirectories = if ($xml.KUAP_Helper.AutoMode.ScanDirectory)
				{
					[regex]::Split($xml.KUAP_Helper.AutoMode.ScanDirectory, [System.Char]59)
				}
				
				[String[]]$script:ScanFilter = if ($xml.KUAP_Helper.AutoMode.ScanFilter)
				{
					[regex]::Split($xml.KUAP_Helper.AutoMode.ScanFilter, [System.Char]59)
				}
				
				$script:ScanFrequency =  switch ([Int]$xml.KUAP_Helper.AutoMode.ScanFrequency)
				{
					{ $_ -ge 60000 -and $_ -le 3600000 }{ $xml.KUAP_Helper.AutoMode.ScanFrequency }
					default { 60000 }
				}
				
				$script:ScanWindowPosition = $xml.KUAP_Helper.AutoMode.ScanWindowPosition
				
				$script:ScanWindowOpacity = switch ([Int]$xml.KUAP_Helper.AutoMode.ScanWindowOpacity)
				{
					{ $_ -ge 10 -and $_ -le 100 } { $xml.KUAP_Helper.AutoMode.ScanWindowOpacity }
					default { 100 }
				}
				
				$script:ExtendedLoggingForScanComparison = switch ($XML.KUAP_Helper.AutoMode.ExtendedLoggingForScanComparison)
				{
					'TRUE' { $true }
					default { $false }
				}
				
				try
				{
					[datetime]$TimeFrom = $xml.KUAP_Helper.AutoMode.ScanTimeFrom
					$script:ScanTimeFrom = $TimeFrom.TimeOfDay
				}
				catch
				{
					$script:ScanTimeFrom = $([datetime]'22:00').TimeOfDay
				}
				
				try
				{
					[datetime]$TimeTo = $xml.KUAP_Helper.AutoMode.ScanTimeTo
					$script:ScanTimeTo = $TimeTo.TimeOfDay
				}
				catch
				{
					$script:ScanTimeTo = $([datetime]'23:59').TimeOfDay
				}
			}
			else
			{
				$EC++
				$script:SB.Append($('Ошибка формата файла конфигурации;' -f $script:XMLConfig))
				$script:SB.Append([System.Environment]::NewLine)
			}
		}
		else
		{
			$EC++
			$script:SB.Append($('Файл конфигурации {0} не найден;' -f $script:XMLConfig))
			$script:SB.Append([System.Environment]::NewLine)
		}
		if ([System.IO.File]::Exists($script:Functions))
		{
			try
			{
				$Stream = [System.IO.File]::OpenRead($script:Functions)
				$script:FunctionsFileMD5Hash = [regex]::Replace([System.BitConverter]::ToString($MD5.ComputeHash($Stream)), [Char]45, [String]::Empty).ToLowerInvariant()
				$Stream.Close()
			}
			catch
			{
				$EC++ #возможно стоить убрать в качестве критической ошибки
				$script:SB.Append('Ошибка вычисления MD5 хеша для файла функций;')
				$script:SB.Append([System.Environment]::NewLine)
			}
			try
			{
				. $script:Functions
			}
			catch
			{
				$EC++
				$script:SB.Append('Ошибка формата файла функций;')
				$script:SB.Append([System.Environment]::NewLine)
			}
		}
		else
		{
			$EC++
			$script:SB.Append($('Файл функций {0} не найден;' -f $script:Functions))
			$script:SB.Append([System.Environment]::NewLine)
		}
		if ($EC -gt 0)
		{
			$script:SB.Append([System.Environment]::NewLine)
			$script:SB.Append([System.Environment]::NewLine)
			$script:SB.Append('Дальнейшая работа программы невозможна.')
			$script:Prerequisites = $false
		}
		else
		{
			$script:Prerequisites = $true
		}
	}
	
	function Get-MongoServer
	{
		param ($HostName, $Port);
		$MongoClient = New-Object -TypeName MongoDB.Driver.MongoClient -ArgumentList $("mongodb://{0}:{1}" -f $HostName, $Port);
		$MongoClient.GetServer();
	}
	
	function Get-MongoDatabase
	{
		param ($MongoServer, $DatabaseName);
		$MongoServer.Connect();
		$MongoServer.GetDatabase($DatabaseName);
	}
	
	function Get-MongoCollection
	{
		param ($MongoDatabase, $MongoCollection, $Action, [MongoDB.Bson.BsonDocument]$Doc, [String]$DocId);
		$Collection = $MongoDatabase.GetCollection($MongoCollection);
		switch ($Action)
		{
			'Count' {
				$Collection.Count()
			};
			'Truncate' {
				[MongoDB.Bson.BsonDocument]$EmptyQDoc = [MongoDB.Driver.Builders.Query]::Null
				$Collection.Remove($EmptyQDoc)
			};
			'Insert' {
				$Collection.Insert($Doc, [MongoDB.Driver.SafeMode]::True)
			};
			'CheckId'{
				$Query = [MongoDB.Driver.Builders.Query]::EQ('_id', $DocId);
				$FindResults = $Collection.Find($Query);
				$FindResults.Count()
			};
			'RemoveDoc'{
				$Query = [MongoDB.Driver.Builders.Query]::EQ('_id', $DocId);
				[MongoDB.Bson.BsonDocument]$DocToRemove = $Query
				$Collection.Remove($DocToRemove)
			};
			'Backup'{
				$BackupName = 'Backup_{0}' -f $MongoCollection
				$MongoDatabase.DropCollection($BackupName)
				$MongoDatabase.CreateCollection($BackupName)
				$BackupCollection = $MongoDatabase.GetCollection($BackupName)
				$BackupData = $Collection.FindAll()
				$BackupCollection.InsertBatch($BackupData)
			};
		}
	}
	
	function New-LogRecord
	{
		param ($EventType, $Event)
		$LogFile = Join-Path $script:WorkingDirectory $script:LogPattern
		switch ($script:LogLevel)
		{
			'DEBUG' {
	            '{0}|{1}|{2}|{3}' -f $EventType, [System.Security.Principal.WindowsIdentity]::GetCurrent().Name, [System.DateTime]::Now.ToString('dd.MM.yyyy HH:mm:ss.fff', [System.Globalization.CultureInfo]::InvariantCulture), $Event | Out-File $LogFile -Append
			}
			'ERROR'
			{
				if ($EventType -eq 'ERROR')
				{
					'{0}|{1}|{2}|{3}' -f $EventType, [System.Security.Principal.WindowsIdentity]::GetCurrent().Name, [System.DateTime]::Now.ToString('dd.MM.yyyy HH:mm:ss.fff', [System.Globalization.CultureInfo]::InvariantCulture), $Event | Out-File $LogFile -Append
				}
			}
		}
	}
	
	function Invoke-MessageBox
	{
		param ($Text, $Caption)
		[void][System.Windows.Forms.MessageBox]::Show($Text, $Caption)
	}
	
	function ConvertTo-DataTable
	{
		[OutputType([System.Data.DataTable])]
		param (
			[ValidateNotNull()]
			$InputObject,
			[ValidateNotNull()]
			[System.Data.DataTable]$Table,
			[switch]$RetainColumns,
			[switch]$FilterWMIProperties)
		
		if ($Table -eq $null)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($InputObject -eq $null) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($item -ne $null)
					{
						$object = $item
						break
					}
				}
				
				if ($object -eq $null) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($prop.Value -ne $null)
						{
							try { $type = $prop.Value.GetType() }
							catch { }
						}
						
						if ($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @(, $Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(, $Table)
	}
	
	function SearchGrid()
	{
		$RowIndex = 0
		$ColumnIndex = 0
		$seachString = $textboxSearch.Text
		
		if ($seachString -eq "")
		{
			return
		}
		
		if ($datagridviewResults.SelectedCells.Count -ne 0)
		{
			$startCell = $datagridviewResults.SelectedCells[0];
			$RowIndex = $startCell.RowIndex
			$ColumnIndex = $startCell.ColumnIndex + 1
		}
		
		$columnCount = $datagridviewResults.ColumnCount
		$rowCount = $datagridviewResults.RowCount
		for (; $RowIndex -lt $rowCount; $RowIndex++)
		{
			$Row = $datagridviewResults.Rows[$RowIndex]
			
			for (; $ColumnIndex -lt $columnCount; $ColumnIndex++)
			{
				$cell = $Row.Cells[$ColumnIndex]
				
				if ($cell.Value -ne $null -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
				{
					$datagridviewResults.CurrentCell = $cell
					return
				}
			}
			
			$ColumnIndex = 0
		}
		
		$datagridviewResults.CurrentCell = $null
		[void][System.Windows.Forms.MessageBox]::Show("Я очень старался, но не смог найти то чего вы искали.", "Строка не найдена")
	}
	
	function Set-CommandLineParameters
	{
		if (@('Continue', 'SilentlyContinue', 'Stop') -contains $script:Dictionary["EA"])
		{
			$script:ErrorActionPreference = $script:Dictionary["EA"]
			[void][System.Windows.Forms.MessageBox]::Show($('Режим обработки ошибок: {0}' -f $script:Dictionary["EA"]), 'Information')
		}
		
		if ($script:Dictionary["Mode"] -eq 'Auto')
		{
			$script:ApplicationMode = 'Auto'
		}
	}
	
	function Parse-Commandline
	{
		
		[OutputType([System.Collections.Specialized.StringCollection])]
		Param ([string]$CommandLine)
		
		$Arguments = New-Object System.Collections.Specialized.StringCollection
		
		if ($CommandLine)
		{
			$index = $CommandLine.IndexOf('"')
			
			while ($index -ne -1)
			{
				$closeIndex = $CommandLine.IndexOf('"', $index + 1)
				if ($closeIndex -eq -1)
				{
					break
				}
				$value = $CommandLine.Substring($index + 1, $closeIndex – ($index + 1))
				[void]$Arguments.Add($value)
				$index = $closeIndex
				
				$index = $CommandLine.IndexOf('"', $index + 1)
			}
		}
		return $Arguments
	}
	
	function Convert-CommandLineToDictionary
	{
		Param ([ValidateNotNull()]
			[System.Collections.Specialized.StringDictionary]$Dictionary,
			[string]$CommandLine,
			[char] $ParamIndicator)
		
		$Params = Parse-Commandline $CommandLine
		
		for ($index = 0; $index -lt $Params.Count; $index++)
		{
			[string]$param = $Params[$index]
			$key = ""
			$value = ""
			
			if ($param.StartsWith($ParamIndicator))
			{
				$key = $param.Remove(0, 1)
				if ($index + 1 -lt $Params.Count)
				{
					[string]$param = $Params[$index + 1]
					if ($param.StartsWith($ParamIndicator) -ne $true)
					{
						$value = $param
						$index++
					}
				}
				$Dictionary[$key] = $value
			}
		}
	}
	
	function Wait-ForServiceState
	{
		param (
			[String]$ServiceName,
			[String]$State,
			[Int]$TickMs,
			[Int]$AttemptsNum
		)
		$i = 1
		$Filter = $("Name='{0}'" -f $ServiceName)
		do
		{
			[wmi]$wmi = Get-WmiObject -Class Win32_Service -Filter $Filter
			Start-Sleep -Milliseconds $TickMs
			$i++
		}
		while (-not ($wmi.State -eq $State -or $i -ge $AttemptsNum))
		if ($wmi.State -eq $State)
		{
			return $true
		}
		else
		{
			return $false
		}
	}
	
	function Show-NotifyIcon
	{
		param (
			[Parameter(Mandatory = $true, Position = 0)]
			[ValidateNotNull()]
			[System.Windows.Forms.NotifyIcon]$NotifyIcon,
			[Parameter(Mandatory = $true, Position = 1)]
			[ValidateNotNullOrEmpty()]
			[String]$BalloonTipText,
			[Parameter(Position = 2)]
			[String]$BalloonTipTitle = '',
			[Parameter(Position = 3)]
			[System.Windows.Forms.ToolTipIcon]$BalloonTipIcon = 'None',
			[Parameter(Position = 4)]
			[int]$Timeout = 0
		)
		
		if ($NotifyIcon.Icon -eq $null)
		{
			#Set a Default Icon otherwise the balloon will not show
			$NotifyIcon.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon([System.Windows.Forms.Application]::ExecutablePath)
		}
		
		$NotifyIcon.ShowBalloonTip($Timeout, $BalloonTipTitle, $BalloonTipText, $BalloonTipIcon)
	}
	
	function Set-HTMLMessage
	{
		param ($InsertionStatus,$Information)
		$SB = New-Object System.Text.StringBuilder
		[Void]$SB.Append(
		"<!DOCTYPE html>
<html>
<head>
<style>
TABLE, TD {
    font-family: Tahoma; 
    font-size: 18px; 
    border-top: 1px solid #000000;
    border-right: 1px solid #000000;
    border-bottom: 1px solid #000000;
    border-left: 1px solid #000000;
    padding-top: 1px; 
    padding-right: 1px; 
    padding-bottom: 1px; 
    padding-left: 1px; 
    text-align: center;
    background-color: #FFFFFF;
    font-weight:bold;
}
TH {
    text-align: center;
    border-width: 1px;
    padding: 1px;
    border-style: solid;
    border-color: black;
    background-color: #6495ED;
}
</style>
</head>
<body>

<div>
  <h2>Результаты автоматической загрузки депозитных ставок</h2>"
	)
		[Void]$SB.Append($Information)
		[Void]$SB.Append(
	"</div>

<table width='50%' align='left' border='0' cellspacing='0' cellpadding='0'>
<tr>
    <th><font weight='bold' size='3'>Ставка</th>
    <th><font weight='bold' size='3'>Статус</th>
</tr>"
		)
		
		foreach ($Record in $InsertionStatus)
		{
			$Color = if ($Record.Status -eq 'OK') { '#24e00f' } else { '#ea0909' }
			$Element = "	<tr><td>{1}</td><td><font style='italic' color='{0}' size='3'>{2}</td></tr>" -f $Color, $Record.Id, $Record.Status
			[Void]$SB.AppendLine($Element)
		}
		
		[Void]$SB.Append(
		"</table>
</body>
</html>"
		)
		
		return $SB.ToString()
	}#endregion Source: Globals.ps1

#region Source: DataPreview.psf
function Call-DataPreview_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
hjjMtRfwbf7oocpJZPEnmcl/ALomNPuhKQAA#>
#endregion
param($DataSource)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMain = New-Object 'System.Windows.Forms.Form'
	$groupboxMiddle = New-Object 'System.Windows.Forms.GroupBox'
	$datagridviewResults = New-Object 'System.Windows.Forms.DataGridView'
	$groupboxBottom = New-Object 'System.Windows.Forms.GroupBox'
	$buttonВыход = New-Object 'System.Windows.Forms.Button'
	$groupboxTop = New-Object 'System.Windows.Forms.GroupBox'
	$textboxSearch = New-Object 'System.Windows.Forms.TextBox'
	$buttonПоиск = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	function OnApplicationLoad {
		return $true #return true for success or false for failure
	}
	
	function OnApplicationExit {
		$script:ExitCode = 0 #Set the exit code for the Packager
	}
	
	$FormEvent_Load={
		$Source = ConvertTo-DataTable -InputObject $DataSource
		$datagridviewResults.DataSource = $Source
	}
	
	$buttonВыход_Click={
		#TODO: Place custom script here
		$formMain.Close()
	}
	
	$buttonПоиск_Click={
		SearchGrid
	}
	
	$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if($datagridviewResults.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewResults.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		if($_.KeyCode -eq 'Enter' -and $buttonПоиск.Enabled)
		{
			SearchGrid	
			$_.SuppressKeyPress = $true
		}
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMain.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:DataPreview_textboxSearch = $textboxSearch.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$datagridviewResults.remove_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
			$buttonВыход.remove_Click($buttonВыход_Click)
			$textboxSearch.remove_KeyDown($textboxSearch_KeyDown)
			$buttonПоиск.remove_Click($buttonПоиск_Click)
			$formMain.remove_Load($FormEvent_Load)
			$formMain.remove_Load($Form_StateCorrection_Load)
			$formMain.remove_Closing($Form_StoreValues_Closing)
			$formMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMain.SuspendLayout()
	$groupboxMiddle.SuspendLayout()
	$groupboxBottom.SuspendLayout()
	$groupboxTop.SuspendLayout()
	#
	# formMain
	#
	$formMain.Controls.Add($groupboxMiddle)
	$formMain.Controls.Add($groupboxBottom)
	$formMain.Controls.Add($groupboxTop)
	$formMain.AcceptButton = $buttonПоиск
	$formMain.CancelButton = $buttonВыход
	$formMain.ClientSize = '792, 573'
	$formMain.MinimumSize = '800, 600'
	$formMain.Name = "formMain"
	$formMain.ShowIcon = $False
	$formMain.StartPosition = 'CenterScreen'
	$formMain.Text = "Данные о ставках"
	$formMain.add_Load($FormEvent_Load)
	#
	# groupboxMiddle
	#
	$groupboxMiddle.Controls.Add($datagridviewResults)
	$groupboxMiddle.Dock = 'Fill'
	$groupboxMiddle.Location = '0, 69'
	$groupboxMiddle.Name = "groupboxMiddle"
	$groupboxMiddle.Size = '792, 448'
	$groupboxMiddle.TabIndex = 5
	$groupboxMiddle.TabStop = $False
	#
	# datagridviewResults
	#
	$datagridviewResults.AllowUserToAddRows = $False
	$datagridviewResults.AllowUserToDeleteRows = $False
	$datagridviewResults.AllowUserToResizeColumns = $False
	$datagridviewResults.AllowUserToResizeRows = $False
	$System_Windows_Forms_DataGridViewCellStyle_1 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_1.Alignment = 'MiddleCenter'
	$System_Windows_Forms_DataGridViewCellStyle_1.BackColor = '224, 224, 224'
	$datagridviewResults.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridviewResults.AutoSizeColumnsMode = 'Fill'
	$datagridviewResults.AutoSizeRowsMode = 'AllCells'
	$System_Windows_Forms_DataGridViewCellStyle_2 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_2.Alignment = 'MiddleCenter'
	$System_Windows_Forms_DataGridViewCellStyle_2.BackColor = 'Control'
	$System_Windows_Forms_DataGridViewCellStyle_2.Font = "Microsoft Sans Serif, 8.25pt"
	$System_Windows_Forms_DataGridViewCellStyle_2.ForeColor = 'WindowText'
	$System_Windows_Forms_DataGridViewCellStyle_2.SelectionBackColor = 'Highlight'
	$System_Windows_Forms_DataGridViewCellStyle_2.SelectionForeColor = 'HighlightText'
	$System_Windows_Forms_DataGridViewCellStyle_2.WrapMode = 'True'
	$datagridviewResults.ColumnHeadersDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridviewResults.ColumnHeadersHeightSizeMode = 'DisableResizing'
	$System_Windows_Forms_DataGridViewCellStyle_3 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_3.Alignment = 'MiddleCenter'
	$System_Windows_Forms_DataGridViewCellStyle_3.BackColor = 'Window'
	$System_Windows_Forms_DataGridViewCellStyle_3.Font = "Microsoft Sans Serif, 8.25pt"
	$System_Windows_Forms_DataGridViewCellStyle_3.ForeColor = 'ControlText'
	$System_Windows_Forms_DataGridViewCellStyle_3.SelectionBackColor = 'Highlight'
	$System_Windows_Forms_DataGridViewCellStyle_3.SelectionForeColor = 'HighlightText'
	$System_Windows_Forms_DataGridViewCellStyle_3.WrapMode = 'False'
	$datagridviewResults.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_3
	$datagridviewResults.Dock = 'Fill'
	$datagridviewResults.Location = '3, 16'
	$datagridviewResults.Name = "datagridviewResults"
	$datagridviewResults.ReadOnly = $True
	$datagridviewResults.RowHeadersDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridviewResults.RowHeadersVisible = $False
	$datagridviewResults.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridviewResults.SelectionMode = 'FullRowSelect'
	$datagridviewResults.Size = '786, 429'
	$datagridviewResults.TabIndex = 0
	$datagridviewResults.add_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
	#
	# groupboxBottom
	#
	$groupboxBottom.Controls.Add($buttonВыход)
	$groupboxBottom.Dock = 'Bottom'
	$groupboxBottom.Location = '0, 517'
	$groupboxBottom.Name = "groupboxBottom"
	$groupboxBottom.Size = '792, 56'
	$groupboxBottom.TabIndex = 2
	$groupboxBottom.TabStop = $False
	#
	# buttonВыход
	#
	$buttonВыход.Anchor = 'Top, Bottom, Left, Right'
	$buttonВыход.DialogResult = 'Cancel'
	$buttonВыход.Location = '3, 19'
	$buttonВыход.Name = "buttonВыход"
	$buttonВыход.Size = '786, 31'
	$buttonВыход.TabIndex = 0
	$buttonВыход.Text = "Выход"
	$buttonВыход.UseVisualStyleBackColor = $True
	$buttonВыход.add_Click($buttonВыход_Click)
	#
	# groupboxTop
	#
	$groupboxTop.Controls.Add($textboxSearch)
	$groupboxTop.Controls.Add($buttonПоиск)
	$groupboxTop.Dock = 'Top'
	$groupboxTop.Location = '0, 0'
	$groupboxTop.Name = "groupboxTop"
	$groupboxTop.Size = '792, 69'
	$groupboxTop.TabIndex = 0
	$groupboxTop.TabStop = $False
	#
	# textboxSearch
	#
	$textboxSearch.Dock = 'Fill'
	$textboxSearch.Location = '3, 16'
	$textboxSearch.Name = "textboxSearch"
	$textboxSearch.Size = '786, 20'
	$textboxSearch.TabIndex = 0
	$textboxSearch.add_KeyDown($textboxSearch_KeyDown)
	#
	# buttonПоиск
	#
	$buttonПоиск.Anchor = 'Bottom, Left, Right'
	$buttonПоиск.Location = '3, 40'
	$buttonПоиск.Name = "buttonПоиск"
	$buttonПоиск.Size = '786, 26'
	$buttonПоиск.TabIndex = 1
	$buttonПоиск.Text = "Поиск"
	$buttonПоиск.UseVisualStyleBackColor = $True
	$buttonПоиск.add_Click($buttonПоиск_Click)
	$groupboxTop.ResumeLayout($false)
	$groupboxBottom.ResumeLayout($false)
	$groupboxMiddle.ResumeLayout($false)
	$formMain.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formMain.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formMain.ShowDialog()
}
#endregion Source: DataPreview.psf

#region Source: ServiceControl.psf
function Call-ServiceControl_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formServiceControl = New-Object 'System.Windows.Forms.Form'
	$labelCurrentStatus = New-Object 'System.Windows.Forms.Label'
	$labelStatus = New-Object 'System.Windows.Forms.Label'
	$buttonStart = New-Object 'System.Windows.Forms.Button'
	$buttonStop = New-Object 'System.Windows.Forms.Button'
	$labelServiceName = New-Object 'System.Windows.Forms.Label'
	$comboboxServices = New-Object 'System.Windows.Forms.ComboBox'
	$timer = New-Object 'System.Windows.Forms.Timer'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$formServiceControl_Load = {
		$Services = Get-Service | Select-Object -ExpandProperty Name
		foreach ($Services in [Array]$Services) { $comboboxServices.Items.Add($Services) }
		$comboboxServices.SelectedIndex = 0
	}
	
	$comboboxServices_SelectedIndexChanged = {
		$script:Status = Get-Service -Name $comboboxServices.SelectedItem | Select-Object -ExpandProperty Status
		switch ($script:Status)
		{
			'Running' {
				$labelCurrentStatus.ForeColor = 'Green'
			}
			'Stopped' {
				$labelCurrentStatus.ForeColor = 'Red'
			}
			default	{
				$labelCurrentStatus.ForeColor = 'ControlText'
			}
		}
		$labelCurrentStatus.Text = $script:Status
	}
	
	$formServiceControl_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		$timer.Enabled = $false
	}
	
	$timer_Tick = {
		do
		{
			& $comboboxServices_SelectedIndexChanged
			Write-Host $script:Status
			if ($script:Status -eq $script:DestinationStatus)
			{
				$script:Busy = $false
			}
		}
		while ($script:Busy)
		$timer.Enabled = $false
		$comboboxServices.Enabled = $true
		$buttonStop.Enabled = $true
		$buttonStart.Enabled = $true
	}
	
	$buttonStop_Click = {
		$buttonStop.Enabled = $false
		$buttonStart.Enabled = $false
		
		$timer.Enabled = $true
		$script:Busy = $true
		$script:DestinationStatus = 'Stopped'
		$comboboxServices.Enabled = $false
		try
		{
			New-LogRecord -EventType 'DEBUG' -Event $('Выполняется остановка службы "{0}".' -f $comboboxServices.SelectedItem)
			Stop-Service -Name $comboboxServices.SelectedItem
		}
		catch
		{
			New-LogRecord -EventType 'ERROR' -Event $Error[0]
			Invoke-MessageBox -Caption 'Ошибка' -Text $Error[0]
		}
	}
	
	$buttonStart_Click = {
		$buttonStop.Enabled = $false
		$buttonStart.Enabled = $false
		
		$timer.Enabled = $true
		$script:Busy = $true
		$script:DestinationStatus = 'Running'
		$comboboxServices.Enabled = $false
		try
		{
			New-LogRecord -EventType 'DEBUG' -Event $('Выполняется запуск службы "{0}".' -f $comboboxServices.SelectedItem)
			Start-Service -Name $comboboxServices.SelectedItem
		}
		catch
		{
			New-LogRecord -EventType 'ERROR' -Event $Error[0]
			Invoke-MessageBox -Caption 'Ошибка' -Text $Error[0]
		}
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formServiceControl.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ServiceControl_comboboxServices_SelectedItem = $comboboxServices.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonStart.remove_Click($buttonStart_Click)
			$buttonStop.remove_Click($buttonStop_Click)
			$comboboxServices.remove_SelectedIndexChanged($comboboxServices_SelectedIndexChanged)
			$formServiceControl.remove_FormClosed($formServiceControl_FormClosed)
			$formServiceControl.remove_Load($formServiceControl_Load)
			$timer.remove_Tick($timer_Tick)
			$formServiceControl.remove_Load($Form_StateCorrection_Load)
			$formServiceControl.remove_Closing($Form_StoreValues_Closing)
			$formServiceControl.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formServiceControl.SuspendLayout()
	#
	# formServiceControl
	#
	$formServiceControl.Controls.Add($labelCurrentStatus)
	$formServiceControl.Controls.Add($labelStatus)
	$formServiceControl.Controls.Add($buttonStart)
	$formServiceControl.Controls.Add($buttonStop)
	$formServiceControl.Controls.Add($labelServiceName)
	$formServiceControl.Controls.Add($comboboxServices)
	#region Binary Data
	$formServiceControl.BackgroundImage = [System.Convert]::FromBase64String('
/9j/4AAQSkZJRgABAQEAYABgAAD/4QCuRXhpZgAATU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAA
AZKGAAcAAAB6AAAALAAAAABVTklDT0RFAABDAFIARQBBAFQATwBSADoAIABnAGQALQBqAHAAZQBn
ACAAdgAxAC4AMAAgACgAdQBzAGkAbgBnACAASQBKAEcAIABKAFAARQBHACAAdgA2ADIAKQAsACAA
cQB1AGEAbABpAHQAeQAgAD0AIAA5ADAACv/+ADxDUkVBVE9SOiBnZC1qcGVnIHYxLjAgKHVzaW5n
IElKRyBKUEVHIHY2MiksIHF1YWxpdHkgPSA5MAoA/9sAQwADAgIDAgIDAwMDBAMDBAUIBQUEBAUK
BwcGCAwKDAwLCgsLDQ4SEA0OEQ4LCxAWEBETFBUVFQwPFxgWFBgSFBUU/9sAQwEDBAQFBAUJBQUJ
FA0LDRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU/8AA
EQgAgACAAwEiAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIB
AwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBka
JSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SV
lpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX2
9/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAEC
dwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4
OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQAC
EQMRAD8A2LeykadQdwPZq0be1uoTuE7qc9eua2o9HMQBaNsMTtLAgfhVhbNRgSIQe2DX7PUhRrS+
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')
	#endregion
	$formServiceControl.BackgroundImageLayout = 'Stretch'
	$formServiceControl.ClientSize = '274, 189'
	$formServiceControl.FormBorderStyle = 'FixedDialog'
	$formServiceControl.MaximizeBox = $False
	$formServiceControl.MinimizeBox = $False
	$formServiceControl.Name = "formServiceControl"
	$formServiceControl.ShowIcon = $False
	$formServiceControl.StartPosition = 'CenterParent'
	$formServiceControl.Text = "Service Control"
	$formServiceControl.add_FormClosed($formServiceControl_FormClosed)
	$formServiceControl.add_Load($formServiceControl_Load)
	#
	# labelCurrentStatus
	#
	$labelCurrentStatus.BackColor = 'Transparent'
	$labelCurrentStatus.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelCurrentStatus.Location = '193, 36'
	$labelCurrentStatus.Name = "labelCurrentStatus"
	$labelCurrentStatus.Size = '69, 23'
	$labelCurrentStatus.TabIndex = 5
	$labelCurrentStatus.Text = "Running"
	#
	# labelStatus
	#
	$labelStatus.BackColor = 'Transparent'
	$labelStatus.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelStatus.Location = '193, 2'
	$labelStatus.Name = "labelStatus"
	$labelStatus.Size = '69, 23'
	$labelStatus.TabIndex = 4
	$labelStatus.Text = "Status"
	$labelStatus.TextAlign = 'BottomLeft'
	#
	# buttonStart
	#
	$buttonStart.BackColor = 'Transparent'
	$buttonStart.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$buttonStart.Location = '102, 154'
	$buttonStart.Name = "buttonStart"
	$buttonStart.Size = '85, 23'
	$buttonStart.TabIndex = 3
	$buttonStart.Text = "Start"
	$buttonStart.UseVisualStyleBackColor = $False
	$buttonStart.add_Click($buttonStart_Click)
	#
	# buttonStop
	#
	$buttonStop.BackColor = 'Transparent'
	$buttonStop.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$buttonStop.Location = '12, 154'
	$buttonStop.Name = "buttonStop"
	$buttonStop.Size = '85, 23'
	$buttonStop.TabIndex = 2
	$buttonStop.Text = "Stop"
	$buttonStop.UseVisualStyleBackColor = $False
	$buttonStop.add_Click($buttonStop_Click)
	#
	# labelServiceName
	#
	$labelServiceName.BackColor = 'Transparent'
	$labelServiceName.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelServiceName.Location = '12, 4'
	$labelServiceName.Name = "labelServiceName"
	$labelServiceName.Size = '175, 21'
	$labelServiceName.TabIndex = 1
	$labelServiceName.Text = "Service Name"
	$labelServiceName.TextAlign = 'BottomLeft'
	#
	# comboboxServices
	#
	$comboboxServices.DropDownStyle = 'DropDownList'
	$comboboxServices.FormattingEnabled = $True
	$comboboxServices.Location = '12, 33'
	$comboboxServices.Name = "comboboxServices"
	$comboboxServices.Size = '175, 21'
	$comboboxServices.TabIndex = 0
	$comboboxServices.add_SelectedIndexChanged($comboboxServices_SelectedIndexChanged)
	#
	# timer
	#
	$timer.add_Tick($timer_Tick)
	$formServiceControl.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formServiceControl.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formServiceControl.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formServiceControl.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formServiceControl.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formServiceControl.ShowDialog()
}
#endregion Source: ServiceControl.psf

#region Source: AutoMode.psf
function Call-AutoMode_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
GBMAAB+LCAAAAAAABADNWN1u2zYUvh+wdxB0bfg3zk/hCIjtZg3WtEHkJb0LKOnY4UKRBknFca/W
Xg/oG/QZhmEbigHbM8hvtCPJ8V/siErrYAiQWBS/851z+PEjndY5+OIW5LhLNLHwg6KCH9p12/n+
O8tqvZV0QDlhx5TBGxKCcxRpcSoCKA9Vv1V58DoDeT+Dry09HsKh7Y6VhrB8SXkgRqp8LGSY/S5Z
616VrItpDjvlavJTsjoR05GEQw6RloSVrLPIY9T/EcY9cQP80NvbI02/uVs7aOxAdf/Atjimcmj3
Md59urblX1MWSJxudwTXUjCVlYj5nkkxBKnHU1yHUeDape/BdvYP6iWr1mi2KveTNoGyoG1xZzvH
hCnIRSTltoUMQLp6zJDrjeD5qKTLtrNYWi7EvRajE19w08TS+bxH1I1HpCmoB3fadlyf8PypYngq
FM7uyWhN4Je32P2FHnWYUBAs13w1f9GqpIB16NeCrOKSoRVEvlqTrfGDpMEFhdHWVRsg2QDJbpEs
aeeZkJqwLpWYpJAU1GNSftjsI8bE6CcFsieOguAcM960oo9iu8BAw5Ph56BwO3UEi0L+NREKJoCr
7s55Ux9w0KpYAWzCmAExmQ4wpgzAGeErILi51Sugg+vUTrI4XaqIxyAtiPKBQbiu8G+ME38tfKJp
sttRhPWGASKzlFzdGUQ6x4rfcjbesLXXAMRo2qULqqiXuKDp4s6hlzTQ11/TXxfF7Sc9myokYgyj
Z6Mm8PlJcVA1mN8j3gkPAA+KtbMXHSxxnpdSCmmwPlezySsGV8kcztzvXE10pNpEbt3sZkyXhGoM
nhRWzN+W5F6rmet9HXWxxa7XzeajCPH0GJpLey4QE4b05LXuQvZCDYmPA0MJaJm3mCbOjj/Hf8Vf
4j/i3+J/8O+f1uRD/Hf2MPkl/jf+ffr5U6qU1bO4sHTakdaCb103XkrjajEsrpjMTfESUtRMTfZ2
pq3l9AqqykTCc4XUTBXixJ8nHyYf0+VOlv3L5OPkVwMwHr/ozRFh6S21TfwbPN0SQ9pk8Yv+hVfp
pNnL/bhKRx8xqeWHfNH1aAjb96qUJZXbhnvtCde47QiznWa1+lAsS43ppX2ZhbzqrXTkf9yCi+N3
+R2oFekARsxpwJFSEGKKoO5DTUfGzrTkU8LJAEKEl5OrW5hu23npDdPSGzWv39hv7pKgsbsDyRe/
GdMqc6h8IRn1vkGDH2HJ6nsOjm8um3zG5MryPESSjPAcfgpXtdFv9vf6tVrQrJIGyed6F7LnqWl6
9xu7uOmoD09assLVdYSEZylvWhV6CJa2hdpmj5mrtCqL/wlz/gNdeW1wGBMAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAutoMode = New-Object 'System.Windows.Forms.Form'
	$datagridviewScanPortalDirectories = New-Object 'System.Windows.Forms.DataGridView'
	$StatusBarWaitForScan = New-Object 'System.Windows.Forms.StatusBar'
	$buttonStopScan = New-Object 'System.Windows.Forms.Button'
	$TimerScan = New-Object 'System.Windows.Forms.Timer'
	$TimerVFX = New-Object 'System.Windows.Forms.Timer'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$formAutoMode_Load = {
		New-LogRecord -EventType 'DEBUG' -Event 'formAutoMode_Load.'
		New-LogRecord -EventType 'DEBUG' -Event $('ScanTimeFrom is set to {0}.' -f $script:ScanTimeFrom)
		New-LogRecord -EventType 'DEBUG' -Event $('ScanTimeTo is set to {0}.' -f $script:ScanTimeTo)
		if ($script:ScanWindowPosition)
		{
			$formAutoMode.Location = switch ($script:ScanWindowPosition){
				'LeftTop' { New-Object System.Drawing.Point(0, 0); break }
				'LeftBottom'  { New-Object System.Drawing.Point(0, $([System.Windows.Forms.Screen]::PrimaryScreen.WorkingArea.Bottom - $formAutoMode.Height)); break }
				'RightTop' { New-Object System.Drawing.Point($([System.Windows.Forms.Screen]::PrimaryScreen.WorkingArea.Width - $formAutoMode.Width), 0); break }
				'RightBottom' { New-Object System.Drawing.Point($([System.Windows.Forms.Screen]::PrimaryScreen.WorkingArea.Width - $formAutoMode.Width), $([System.Windows.Forms.Screen]::PrimaryScreen.WorkingArea.Bottom - $formAutoMode.Height)); break }
				default { New-Object System.Drawing.Point($formAutoMode.Location) }
			}
			
			New-LogRecord -EventType 'DEBUG' -Event $('ScanWindowPosition is set to {0}.' -f $script:ScanWindowPosition)
		}
		
		$formAutoMode.Opacity = $script:ScanWindowOpacity / 100
		New-LogRecord -EventType 'DEBUG' -Event $('ScanWindowOpacity is set to {0}.' -f $script:ScanWindowOpacity)
		New-LogRecord -EventType 'DEBUG' -Event $('formAutoMode.Opacity is set to {0}.' -f $formAutoMode.Opacity)
		
		$TimerScan.Interval = $script:ScanFrequency
		New-LogRecord -EventType 'DEBUG' -Event $('TimerScan.Interval is set to {0}.' -f $TimerScan.Interval)
		
		$TimerVFX.Interval = $TimerScan.Interval / 50
		New-LogRecord -EventType 'DEBUG' -Event $('TimerVFX.Interval is set to {0}.' -f $TimerVFX.Interval)
		
		$ErrC = 0
		
		if (-not $script:ScanDirectories)
		{
			$ErrC++
			New-LogRecord -EventType 'ERROR' -Event 'ScanDirectories are not set.'
		}
		
		foreach ($WD in $($script:AutoModeCurrent, $script:AutoModeBuffer, $script:AutoModePrevious))
		{
			if (-not [System.IO.Directory]::Exists($WD))
			{
				New-LogRecord -EventType 'DEBUG' -Event $('Missing Directory {0}.' -f $WD)
				try
				{
					New-LogRecord -EventType 'DEBUG' -Event $('Attempt to CreateDirectory {0}.' -f $WD)
					[System.IO.Directory]::CreateDirectory($WD)
					New-LogRecord -EventType 'DEBUG' -Event $('Directory crated {0}.' -f $WD)
				}
				catch
				{
					New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
					$ErrC++
				}
			}
		}
		if ($ErrC -eq 0)
		{ 
			$TimerVFX.Start()
			New-LogRecord -EventType 'DEBUG' -Event 'TimerVFX Started.'
			$TimerScan.Start()
			New-LogRecord -EventType 'DEBUG' -Event 'TimerScan Started.'
		}
		else
		{
			New-LogRecord -EventType 'DEBUG' -Event $('Errors occured {0}. Quitting.' -f $ErrC)
			$formAutoMode.Close()
		}
	}
	
	$formAutoMode_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
		New-LogRecord -EventType 'DEBUG' -Event 'formAutoMode_FormClosed.'
		[System.GC]::Collect();
		[System.GC]::WaitForPendingFinalizers();
	}
	
	$TimerScan_Tick = {
		$TimerScan.Stop()
		if ([datetime]::Now.TimeOfDay -ge $script:ScanTimeFrom -and [datetime]::Now.TimeOfDay -le $script:ScanTimeTo)
		{
			$Directories = New-Object System.Collections.ArrayList
			foreach ($Directory in $script:ScanDirectories)
			{
				New-LogRecord -EventType 'DEBUG' -Event $('Check scan directory exists {0}.' -f $Directory)
				if ([System.IO.Directory]::Exists($Directory))
				{
					[Void]$Directories.Add($Directory)
				}
				else
				{
					New-LogRecord -EventType 'DEBUG' -Event $('Directory {0} is not found.' -f $Directory)
				}
			}
			
			try
			{
				New-LogRecord -EventType 'DEBUG' -Event 'Clearing buffer folders.'
				$BFs = [System.IO.Directory]::GetFiles($script:AutoModeBuffer)
				$BDs = [System.IO.Directory]::GetDirectories($script:AutoModeBuffer)
				foreach ($BF in [System.IO.FileInfo[]]$BFs)
				{
					$BF.Delete()
					New-LogRecord -EventType 'DEBUG' -Event 'Deleted file "{0}".' -f $BF.FullName
				}
				foreach ($BD in [System.IO.DirectoryInfo[]]$BDs)
				{
					$BD.Delete($true)
					New-LogRecord -EventType 'DEBUG' -Event 'Deleted directory "{0}".' -f $BD.FullName
				}
			}
			catch
			{
				New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
			}
			
			$RA = New-Object System.Collections.ArrayList
			foreach ($Filter in $script:ScanFilter)
			{
				try
				{
					$LI = Get-ChildItem -Path $Directories -Recurse -File -Include $Filter |
					Sort-Object -Descending LastWriteTime |
					Select -First 1
					$CI = Get-ChildItem -Path $script:AutoModeCurrent -Recurse -File -Include $Filter
					if ($LI.LastWriteTime -and $CI.LastWriteTime)
					{
						$LIIsNewer = if ([Datetime]$LI.LastWriteTime -gt [Datetime]$CI.LastWriteTime) { $true }
						else { $false }
					}
					
					$PSCO = [PSCustomObject]@{
						ScanTime = [Datetime]::Now;
						Filter = $Filter;
						CIFullName = $CI.FullName;
						CILastWriteTime = $CI.LastWriteTime;
						CISize = $CI.Length;
						LIFullName = $LI.FullName;
						LILastWriteTime = $LI.LastWriteTime;
						LISize = $LI.Length;
						LIIsNewer = $LIIsNewer;
					}
					
					$RA.Add($PSCO)
					
					if ($script:ExtendedLoggingForScanComparison)
					{
						
						New-LogRecord -EventType 'DEBUG' -Event $('script:ExtendedLoggingForScanComparison "{0}". {1}.' -f $script:ExtendedLoggingForScanComparison, $PSCO)
					}
					
					if ($LIIsNewer) { [System.IO.File]::Copy($LI.FullName, $(Join-Path $script:AutoModeBuffer $LI.Name), $true) }
				}
				catch
				{
					New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
				}
			}
			
			[Array]$BufferFiles = [System.IO.Directory]::GetFiles($script:AutoModeBuffer)
			$BufferCount = $BufferFiles.Count
			if ($BufferCount -gt 0)
			{
				foreach ($BufferFile in $BufferFiles)
				{
					$CFile = [System.IO.Path]::GetFileName($BufferFile)
					try
					{
						if ([System.IO.File]::Exists($(Join-Path $script:AutoModePrevious $CFile)))
						{
							New-LogRecord -EventType 'DEBUG' -Event $('Removing previous file {0}.' -f $(Join-Path $script:AutoModePrevious $CFile))
							[System.IO.FileInfo]$PF = [String][System.IO.Directory]::GetFiles($script:AutoModePrevious, $CFile)
							if ($PF)
							{
								$PF.Delete()
								New-LogRecord -EventType 'DEBUG' -Event $('Removed previous file {0}.' -f $(Join-Path $script:AutoModePrevious $CFile))
							}
						}
						
						if ([System.IO.File]::Exists($(Join-Path $script:AutoModeCurrent $CFile)))
						{
							New-LogRecord -EventType 'DEBUG' -Event $('Moving current file {0} to previous directory {1}.' -f $CFile, $script:AutoModeCurrent)
							[System.IO.FileInfo]$CF = [String][System.IO.Directory]::GetFiles($script:AutoModeCurrent, $CFile)
							if ($CF)
							{
								$CF.MoveTo($(Join-Path $script:AutoModePrevious $CFile))
								New-LogRecord -EventType 'DEBUG' -Event $('Moved current file {0} to previous directory {1}.' -f $CFile, $script:AutoModeCurrent)
							}
						}
						
						if ([System.IO.File]::Exists($(Join-Path $script:AutoModeBuffer $CFile)))
						{
							New-LogRecord -EventType 'DEBUG' -Event $('Moving buffer file {0} to current directory {1}.' -f $CFile, $script:AutoModeCurrent)
							[System.IO.FileInfo]$BF = [String][System.IO.Directory]::GetFiles($script:AutoModeBuffer, $CFile)
							if ($BF)
							{
								$BF.MoveTo($(Join-Path $script:AutoModeCurrent $CFile))
								New-LogRecord -EventType 'DEBUG' -Event $('Moved buffer file {0} to current directory {1}.' -f $CFile, $script:AutoModeCurrent)
							}
						}
					}
					catch
					{
						New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
					}
				}
				$script:NewFilesToProceed = $true
				New-LogRecord -EventType 'DEBUG' -Event $('NewFilesToProceed is set to {0}.' -f $script:NewFilesToProceed)
				$formAutoMode.Close()
			}
			else
			{
				New-LogRecord -EventType 'DEBUG' -Event $('Buffer files count {0}.' -f $BufferCount)
			}
			[System.GC]::Collect();
			[System.GC]::WaitForPendingFinalizers();
			$Source = ConvertTo-DataTable -InputObject $RA
			$datagridviewScanPortalDirectories.DataSource = $Source
			New-LogRecord -EventType 'DEBUG' -Event 'DGV source is refreshed.'
		}
		else
		{
			New-LogRecord -EventType 'DEBUG' -Event 'Outside of allowed scan time scope.'
		}
		$TimerScan.Start()
		$StatusBarWaitForScan.Text = '   Ожидание сканирования   '
	}
	
	$buttonStopScan_Click = {
		if ([System.Windows.Forms.MessageBox]::Show('Завершить работу программы?', 'Подтверждение', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes'){
			New-LogRecord -EventType 'DEBUG' -Event 'buttonStopScan YesNo selected "Yes".'
			$script:ApplicationMode = 'ExitAuto'
			$TimerScan.Stop()
			$formAutoMode.Close()
		}
		else
		{
			New-LogRecord -EventType 'DEBUG' -Event 'buttonStopScan YesNo selected "No".'
		}
	}
	
	$datagridviewScanPortalDirectories_DataError=[System.Windows.Forms.DataGridViewDataErrorEventHandler]{
		New-LogRecord -EventType 'ERROR' -Event $Error[0].Exception.Message
	}
	
	$TimerVFX_Tick={
		$StatusBarWaitForScan.Text += [Char]124
		[System.GC]::Collect();
		[System.GC]::WaitForPendingFinalizers();
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAutoMode.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$datagridviewScanPortalDirectories.remove_DataError($datagridviewScanPortalDirectories_DataError)
			$buttonStopScan.remove_Click($buttonStopScan_Click)
			$formAutoMode.remove_FormClosed($formAutoMode_FormClosed)
			$formAutoMode.remove_Load($formAutoMode_Load)
			$TimerScan.remove_Tick($TimerScan_Tick)
			$TimerVFX.remove_Tick($TimerVFX_Tick)
			$formAutoMode.remove_Load($Form_StateCorrection_Load)
			$formAutoMode.remove_Closing($Form_StoreValues_Closing)
			$formAutoMode.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAutoMode.SuspendLayout()
	#
	# formAutoMode
	#
	$formAutoMode.Controls.Add($datagridviewScanPortalDirectories)
	$formAutoMode.Controls.Add($StatusBarWaitForScan)
	$formAutoMode.Controls.Add($buttonStopScan)
	$formAutoMode.ClientSize = '892, 135'
	$formAutoMode.ControlBox = $False
	$formAutoMode.FormBorderStyle = 'None'
	$formAutoMode.Name = "formAutoMode"
	$formAutoMode.ShowIcon = $False
	$formAutoMode.ShowInTaskbar = $False
	$formAutoMode.Text = "Scan"
	$formAutoMode.TopMost = $True
	$formAutoMode.add_FormClosed($formAutoMode_FormClosed)
	$formAutoMode.add_Load($formAutoMode_Load)
	#
	# datagridviewScanPortalDirectories
	#
	$datagridviewScanPortalDirectories.AllowUserToAddRows = $False
	$datagridviewScanPortalDirectories.AllowUserToDeleteRows = $False
	$datagridviewScanPortalDirectories.AllowUserToResizeColumns = $False
	$datagridviewScanPortalDirectories.AllowUserToResizeRows = $False
	$datagridviewScanPortalDirectories.AutoSizeColumnsMode = 'Fill'
	$datagridviewScanPortalDirectories.AutoSizeRowsMode = 'AllCells'
	$datagridviewScanPortalDirectories.ColumnHeadersHeightSizeMode = 'DisableResizing'
	$datagridviewScanPortalDirectories.Dock = 'Fill'
	$datagridviewScanPortalDirectories.Location = '0, 23'
	$datagridviewScanPortalDirectories.Name = "datagridviewScanPortalDirectories"
	$datagridviewScanPortalDirectories.ReadOnly = $True
	$datagridviewScanPortalDirectories.RowHeadersVisible = $False
	$datagridviewScanPortalDirectories.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridviewScanPortalDirectories.SelectionMode = 'FullRowSelect'
	$datagridviewScanPortalDirectories.Size = '892, 90'
	$datagridviewScanPortalDirectories.TabIndex = 0
	$datagridviewScanPortalDirectories.add_DataError($datagridviewScanPortalDirectories_DataError)
	#
	# StatusBarWaitForScan
	#
	$StatusBarWaitForScan.Location = '0, 113'
	$StatusBarWaitForScan.Name = "StatusBarWaitForScan"
	$StatusBarWaitForScan.Size = '892, 22'
	$StatusBarWaitForScan.SizingGrip = $False
	$StatusBarWaitForScan.TabIndex = 2
	$StatusBarWaitForScan.Text = "   Ожидание сканирования   "
	#
	# buttonStopScan
	#
	$buttonStopScan.Dock = 'Top'
	$buttonStopScan.Location = '0, 0'
	$buttonStopScan.Name = "buttonStopScan"
	$buttonStopScan.Size = '892, 23'
	$buttonStopScan.TabIndex = 1
	$buttonStopScan.Text = "Остановить"
	$buttonStopScan.UseVisualStyleBackColor = $True
	$buttonStopScan.add_Click($buttonStopScan_Click)
	#
	# TimerScan
	#
	$TimerScan.Interval = 5000
	$TimerScan.add_Tick($TimerScan_Tick)
	#
	# TimerVFX
	#
	$TimerVFX.Interval = 1000
	$TimerVFX.add_Tick($TimerVFX_Tick)
	$formAutoMode.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAutoMode.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAutoMode.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAutoMode.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAutoMode.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAutoMode.ShowDialog()
}
#endregion Source: AutoMode.psf

#Start the application
Main ($CommandLine)
